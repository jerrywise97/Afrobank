{"version":3,"sources":["components/homepage/index.js","components/forms/validation/index.js","components/forms/index.js","services/index.js","services/authentication/index.js","components/register/index.js","services/appstore/actions/actions.js","services/appstore/actions/index.js","components/signin/signin.js","components/dashboard/sidebar.js","services/transactions/index.js","utils/date.js","utils/money.js","components/dashboard/dashboard.js","components/dashboard/wallet.js","services/notifications/index.js","components/dashboard/sendmoney.js","components/dashboard/profile.js","components/dashboard/settings.js","components/dashboard/index.js","pages/index.js","components/sigout/signOut.js","services/appstore/reducers/reducer.js","services/appstore/reducers/index.js","services/appstore/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["Nav","styled","div","connect","state","isSignedIn","user","signIn","style","height","Container","Col","Row","className","xl","to","value","loginSchema","yup","shape","email","required","password","transferSchema","recipient","amount","signUpSchema","firstName","surName","lastName","matches","gender","phoneNumber","ErrorText","p","Input","input","Button","button","Error","Label","label","axios","create","baseURL","process","registerUser","payload","a","Axios","post","resp","console","log","response","data","userLogin","payLoad","user_login","message","Register","props","handleSubmit","values","setState","formLoading","regError","lg","width","validationSchema","initialValues","validateOnBlur","validateOnChange","onSubmit","errors","handleChange","type","name","onChange","border","borderRadius","marginTop","paddingLeft","paddingRight","color","SignUpForm","this","background","React","Component","dispatch","SignIn","history","error","push","placeholder","autoComplete","LoginForm","Type","span","size","Sidelink","Styled","activeClassName","dashboardRoutes","path","icon","Payment","AccountBalance","Person","SideBar","position","map","idx","key","exact","textDecoration","bottom","ExitToApp","transfer","sender","body","toString","transactionHistory","accountNumber","updateTransactionHistory","get","getBalance","daysOfTheWeek","months","getFormatedDate","date","currentDate","Date","day","getDay","getDate","month","getMonth","year","getFullYear","getHours","getMinutes","length","getTimeOfTheDay","time","formatedDay","formatMoney","money","toFixed","AccountCard","Dashbody","Inputdiv","DashbodyCard","transactions","balanceDisplay","toggleDisplay","display","useState","toggleTransferModal","balance","displayBal","balanceLoading","pageBalance","toggleVisibility","useEffect","fetchData","Search","Autorenew","cursor","onClick","Visibility","top","VisibilityOff","right","fontWeight","Table","overflowY","striped","responsive","borderless","slice","req","transaction_id","transaction_date","transaction_type","Wallet","fetchAllNotifications","deleteSingleNotification","id","Card","setFormLoading","setError","setBalance","fetchBalance","maxheight","formSubmit","TransferForm","Profile","Settings","NotificationDiv","Menu","DropdownMenu","Item","DropdownItem","routes","component","showNotification","setNotification","notifications","userNotification","setUsernotification","deleteNotification","getNotifications","Dashboard","SendMoney","Dropdown","isOpen","toggle","prevState","DropdownToggle","outline","NotificationsNone","borderBottom","_id","notification_text","localStorage","clear","signOut","Main","basename","i","HomePage","intState","userReg","isRegistered","userPinReset","isPinReset","combineReducers","action","config","storage","whitelist","middleWare","thunk","persistedReducer","persistReducer","appStore","store","createStore","applyMiddleware","persiststore","persistStore","App","loading","persistor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.615a1700.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Col, Container, Row } from 'reactstrap'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport QRCode from 'react-qr-code'\r\n\r\nconst Nav = styled.div`\r\n    height: 50px;\r\n`\r\nconst HomePage = () => {\r\n    return (\r\n        <div style={{ height: 100 }}>\r\n            <Container>\r\n                <Col>\r\n                    <Row>\r\n                        <Nav className=\"d-flex justify-content-between align-items-center\">\r\n                            <Col xl={6}></Col>\r\n                            <Col\r\n                                xl={6}\r\n                                className=\"d-flex justify-content-between\"\r\n                            >\r\n                                <Link to=\"/signin\">sign in</Link>\r\n                                <Link to=\"/register\">register</Link>\r\n                            </Col>\r\n                        </Nav>\r\n                    </Row>\r\n                </Col>\r\n                <Col>\r\n                    <QRCode value=\"Akinola\" />\r\n                </Col>\r\n            </Container>\r\n            {/* <TransferModal /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isSignedIn: state.user.signIn.isSignedIn,\r\n})\r\nexport default connect(mapStateToProps, {})(HomePage)\r\n","import * as yup from 'yup'\r\n\r\nconst loginSchema = yup.object().shape({\r\n    email: yup.string().required('email is required'),\r\n    password: yup.string().required('password is required'),\r\n})\r\n\r\nconst transferSchema = yup.object().shape({\r\n    recipient: yup.number().required('recipient account number is required'),\r\n    amount: yup.number().required(),\r\n})\r\n\r\nconst signUpSchema = yup.object().shape({\r\n    firstName: yup.string().required(),\r\n    surName: yup.string().required(),\r\n    lastName: yup.string().required(),\r\n    email: yup.string().required().email(),\r\n    password: yup\r\n        .string()\r\n        .required('*password is required')\r\n        .matches(\r\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/,\r\n            'min length 8 Characters, One Uppercase, One Lowercase, One Number and One Special Character'\r\n        ),\r\n    gender: yup.string().required('*gender is required'),\r\n    phoneNumber: yup.string().required(),\r\n})\r\n\r\nexport { loginSchema, transferSchema, signUpSchema }\r\n","import { Formik } from 'formik'\r\nimport React from 'react'\r\nimport { loginSchema, transferSchema, signUpSchema } from './validation'\r\nimport { Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst ErrorText = styled.p`\r\n    color: red;\r\n    font-size: 12px;\r\n    font-weight: 600;\r\n`\r\n\r\nconst Input = styled.input`\r\n    height: 50px;\r\n    width: 100%;\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 1px solid grey;\r\n    margin-top: 7px;\r\n`\r\n\r\nconst Button = styled.button`\r\n    width: 70%;\r\n    height: 50px;\r\n    border: none;\r\n    outline: none;\r\n    color: white;\r\n    background: #0d3153;\r\n    border-radius: 7px;\r\n`\r\nconst Error = styled.p`\r\n    color: red;\r\n    font-weight: 600;\r\n    text-align: start;\r\n    font-size: 12px;\r\n`\r\nconst Label = styled.label`\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    color: black;\r\n`\r\n\r\nconst LoginForm = (handleSubmit, formLoading, error) => {\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    const style = {\r\n        width: '200px',\r\n    }\r\n    return (\r\n        <Formik\r\n            validationSchema={loginSchema}\r\n            initialValues={initialValues}\r\n            onSubmit={handleSubmit}\r\n            validateOnBlur={false}\r\n            validateOnChange={false}\r\n        >\r\n            {({ errors, handleChange, handleSubmit }) => {\r\n                return (\r\n                    <Col lg={12}>\r\n                        <Col\r\n                            lg={6}\r\n                            className=\"d-flex justify-content-center align-items-center m-auto\"\r\n                        >\r\n                            <form\r\n                                className=\"bg-dark\"\r\n                                style={{ width: '3000px' }}\r\n                                onSubmit={handleSubmit}\r\n                            >\r\n                                {!!error && (\r\n                                    <p style={{ color: 'red' }}>{error}</p>\r\n                                )}\r\n                                <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"Enter your email\"\r\n                                    autoComplete=\"false\"\r\n                                    style={style}\r\n                                />\r\n                                <br />\r\n                                {!!errors.email && (\r\n                                    <p style={{ color: 'red' }}>\r\n                                        {errors.email}\r\n                                    </p>\r\n                                )}\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"Enter your password\"\r\n                                    autoComplete=\"false\"\r\n                                    style={style}\r\n                                />\r\n                                <br />\r\n                                {!!errors.password && (\r\n                                    <p style={{ color: 'red' }}>\r\n                                        {errors.password}\r\n                                    </p>\r\n                                )}\r\n                                <Button type=\"submit\">\r\n                                    {formLoading ? (\r\n                                        <Loader\r\n                                            type=\"ThreeDots\"\r\n                                            height={30}\r\n                                            width={30}\r\n                                            color=\"#00BFFF\"\r\n                                        />\r\n                                    ) : (\r\n                                        'sign in'\r\n                                    )}\r\n                                </Button>\r\n                            </form>\r\n                        </Col>\r\n                    </Col>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst TransferForm = (formSubmit, formLoading, error, balance) => {\r\n    const initialValues = {\r\n        recipient: '',\r\n        amount: '',\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validateOnBlur={false}\r\n            validateOnChange={false}\r\n            initialValues={initialValues}\r\n            validationSchema={transferSchema}\r\n            onSubmit={formSubmit}\r\n        >\r\n            {({ errors, handleChange, handleSubmit, values }) => {\r\n                return (\r\n                    <form onSubmit={handleSubmit}>\r\n                        {!!error && <ErrorText>{error}</ErrorText>}\r\n                        <Input\r\n                            className=\"mb-3 rounded\"\r\n                            type=\"number\"\r\n                            name=\"recipient\"\r\n                            placeholder=\"recipient\"\r\n                            onChange={handleChange}\r\n                        />{' '}\r\n                        {!!errors.recipient && (\r\n                            <Error>{errors.recipient}</Error>\r\n                        )}\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"amount\"\r\n                            className=\"mb-3 rounded\"\r\n                            placeholder=\"enter amount\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        {!!errors.amount && <Error>{errors.amount}</Error>}\r\n                        <div className=\"d-flex justify-content-end align-items-center\">\r\n                            {values.amount > balance && (\r\n                                <ErrorText>insufficient balance</ErrorText>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-center align-items-center\">\r\n                            <Button\r\n                                type=\"submit\"\r\n                                style={{\r\n                                    width: '170px',\r\n                                }}\r\n                                className=\"mt-3 mb-2 rounded-pill\"\r\n                            >\r\n                                {formLoading ? (\r\n                                    <Loader\r\n                                        type=\"ThreeDots\"\r\n                                        height={30}\r\n                                        width={30}\r\n                                        color=\"#00BFFF\"\r\n                                    />\r\n                                ) : (\r\n                                    'send'\r\n                                )}\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst SignUpForm = (formLoading, handleSubmit, regError) => {\r\n    const initialValues = {\r\n        firstName: '',\r\n        surName: '',\r\n        lastName: '',\r\n        email: '',\r\n        gender: '',\r\n        password: '',\r\n        phoneNumber: '',\r\n    }\r\n\r\n    const style = {\r\n        height: '40px',\r\n        width: '95%',\r\n    }\r\n    return (\r\n        <Formik\r\n            validationSchema={signUpSchema}\r\n            initialValues={initialValues}\r\n            validateOnBlur={false}\r\n            validateOnChange={false}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {({ errors, handleChange, handleSubmit, values }) => {\r\n                return (\r\n                    <div\r\n                        className=\"d-flex justify-content-center align-items-center m-auto pb-4\"\r\n                        style={{ width: '60%' }}\r\n                    >\r\n                        <form onSubmit={handleSubmit}>\r\n                            {!!regError && <ErrorText>{regError}</ErrorText>}\r\n                            <Label>First name</Label>\r\n                            <Input\r\n                                value={values.firstName}\r\n                                type=\"text\"\r\n                                style={style}\r\n                                name=\"firstName\"\r\n                                onChange={handleChange}\r\n                            />\r\n                            {!!errors.firstName && (\r\n                                <ErrorText>{errors.firstName}</ErrorText>\r\n                            )}\r\n                            <Label>Surname</Label>\r\n                            <Input\r\n                                value={values.surName}\r\n                                type=\"text\"\r\n                                style={style}\r\n                                name=\"surName\"\r\n                                onChange={handleChange}\r\n                            />\r\n                            {!!errors.surName && (\r\n                                <ErrorText>{errors.surName}</ErrorText>\r\n                            )}\r\n                            <Label>Last name</Label>\r\n                            <Input\r\n                                value={values.lastName}\r\n                                type=\"text\"\r\n                                style={style}\r\n                                name=\"lastName\"\r\n                                onChange={handleChange}\r\n                            />\r\n                            {!!errors.lastName && (\r\n                                <ErrorText>{errors.lastName}</ErrorText>\r\n                            )}\r\n\r\n                            <Label>Email</Label>\r\n                            <Input\r\n                                onChange={handleChange}\r\n                                value={values.email}\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                style={style}\r\n                            />\r\n                            {!!errors.email && (\r\n                                <ErrorText>{errors.email}</ErrorText>\r\n                            )}\r\n                            <Label>Password</Label>\r\n                            <Input\r\n                                value={values.password}\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                onChange={handleChange}\r\n                                style={style}\r\n                            />\r\n                            {!!errors.password && (\r\n                                <ErrorText>{errors.password}</ErrorText>\r\n                            )}\r\n                            <Label>Phone number</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                value={values.phoneNumber}\r\n                                onChange={handleChange}\r\n                                style={style}\r\n                                name=\"phoneNumber\"\r\n                            />\r\n                            {!!errors.phoneNumber && (\r\n                                <ErrorText>{errors.phoneNumber}</ErrorText>\r\n                            )}\r\n                            <Label>Gender</Label>\r\n                            <select\r\n                                style={{\r\n                                    height: '47px',\r\n                                    width: '95%',\r\n                                    border: '1px solid black',\r\n                                    borderRadius: '12px',\r\n                                    marginTop: '7px',\r\n                                    paddingLeft: '20px',\r\n                                    paddingRight: '20px',\r\n                                }}\r\n                                name=\"gender\"\r\n                                value={values.gender}\r\n                                onChange={handleChange}\r\n                            >\r\n                                <option>gender</option>\r\n                                <option value=\"male\">male</option>\r\n                                <option value=\"female\">female</option>\r\n                            </select>\r\n                            {!!errors.gender && (\r\n                                <ErrorText>{errors.gender}</ErrorText>\r\n                            )}\r\n                            <div className=\"d-flex justify-content-center align-items-center\">\r\n                                <Button type=\"submit\" className=\"mt-3\">\r\n                                    {formLoading ? (\r\n                                        <Loader\r\n                                            type=\"ThreeDots\"\r\n                                            height={30}\r\n                                            width={30}\r\n                                            color=\"#00BFFF\"\r\n                                        />\r\n                                    ) : (\r\n                                        'create account'\r\n                                    )}\r\n                                </Button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\nexport { LoginForm, TransferForm, SignUpForm }\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: process.env.REACT_APP_BASE_URL,\r\n});\r\n","import Axios from '../index'\r\n\r\nconst registerUser = async (payload) => {\r\n    try {\r\n        const resp = await Axios.post('/register', payload)\r\n        console.log(resp)\r\n    } catch (error) {\r\n        throw error.response.data\r\n    }\r\n}\r\n\r\nconst userLogin = async (payLoad, user_login) => {\r\n    try {\r\n        const resp = await Axios.post('/login', payLoad)\r\n\r\n        user_login(resp.data.message, true)\r\n        return resp\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst resetPin = async (pin) => {\r\n    const body = { pin }\r\n    try {\r\n        const resp = await Axios.post('/pinreset', body)\r\n        console.log(resp)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst signOut = (userLogin) => {\r\n    try {\r\n        userLogin('', false)\r\n        localStorage.clear()\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\nexport { userLogin, resetPin, registerUser, signOut }\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport { SignUpForm } from '../forms'\r\nimport { registerUser } from '../../services/authentication'\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formLoading: false,\r\n            regError: '',\r\n        }\r\n    }\r\n\r\n    handleSubmit = async (values) => {\r\n        this.setState({ formLoading: true, regError: '' })\r\n        try {\r\n            await registerUser(values)\r\n            this.setState({ formLoading: false })\r\n        } catch (error) {\r\n            this.setState({ formLoading: false, regError: error.message })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Col>\r\n                    <Row>\r\n                        <Col lg={6}>\r\n                            {SignUpForm(\r\n                                this.state.formLoading,\r\n                                this.handleSubmit,\r\n                                this.state.regError\r\n                            )}\r\n                        </Col>\r\n                        <Col style={{ background: '#4004af' }} lg={6}>\r\n                            <div className=\"d-flex justify-content-center align-items-center\">\r\n                                <div>\r\n                                    <h1>Hellow</h1>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register\r\n","import {\r\n    LOGIN,\r\n    pinReset,\r\n    register,\r\n    transactionHistory,\r\n    toggleBalanceDisplay,\r\n} from './index'\r\n\r\nconst user_login = (data, isSignedIn) => (dispatch) => {\r\n    dispatch({\r\n        type: LOGIN,\r\n        payload: data,\r\n        isSignedIn,\r\n    })\r\n}\r\n\r\nconst userRegister = (data, isRegistered) => (dispatch) => {\r\n    dispatch({\r\n        type: register,\r\n        payload: data,\r\n        isRegistered,\r\n    })\r\n}\r\n\r\nconst userPinReset = (data, isPinReset) => (dispatch) => {\r\n    dispatch({\r\n        type: pinReset,\r\n        payload: data,\r\n        isPinReset,\r\n    })\r\n}\r\n\r\nconst updateTransactionHistory = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: transactionHistory,\r\n        payload: data,\r\n    })\r\n}\r\n\r\nconst toggleDisplay = (display) => (dispatch) => {\r\n    dispatch({\r\n        type: toggleBalanceDisplay,\r\n        payload: display,\r\n    })\r\n}\r\n\r\nexport {\r\n    user_login,\r\n    userPinReset,\r\n    userRegister,\r\n    updateTransactionHistory,\r\n    toggleDisplay,\r\n}\r\n","const LOGIN = 'LOGIN'\r\nconst register = 'register'\r\nconst pinReset = 'pinReset'\r\nconst transfer = 'transfer'\r\nconst transactionHistory = 'transactionHistory'\r\nconst toggleBalanceDisplay = 'toggleBalanceDisplay'\r\n\r\nexport {\r\n    LOGIN,\r\n    register,\r\n    pinReset,\r\n    transfer,\r\n    transactionHistory,\r\n    toggleBalanceDisplay,\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { userLogin } from '../../services/authentication'\r\nimport { user_login } from '../../services/appstore/actions/actions'\r\nimport { LoginForm } from '../forms/index'\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { error: '', formLoading: false }\r\n    }\r\n    handleSubmit = async (value) => {\r\n        const { user_login, history } = this.props\r\n        this.setState({\r\n            formLoading: true,\r\n            error: '',\r\n        })\r\n        try {\r\n            await userLogin(value, user_login)\r\n            this.setState({\r\n                formLoading: false,\r\n            })\r\n            history.push('/dashboard')\r\n        } catch (error) {\r\n            this.setState({\r\n                error: error.response.data.message || 'An error occured',\r\n                formLoading: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { formLoading } = this.state\r\n        return (\r\n            <div className=\"d-flex justify-content-center align-items-center\">\r\n                {LoginForm(this.handleSubmit, formLoading, this.state.error)}\r\n                {/* {!!this.state.error && <P color=\"red\">{this.state.error}</P>} */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { user_login })(SignIn)\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Styled from 'styled-components'\r\nimport {\r\n    Dashboard,\r\n    AccountBalance,\r\n    Settings,\r\n    Payment,\r\n    Person,\r\n    ExitToApp,\r\n} from '@material-ui/icons'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nexport const activeClass = 'active'\r\nexport const Sidelink = Styled((props) => (\r\n    <NavLink {...props} activeClassName={activeClass} />\r\n))`\r\n  color: white;\r\n  font-wight: 500;\r\n  font-size: 15px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n  padding-left: 10px;\r\n  border-radius: 10px;\r\n  transition: all ease 0.3s;\r\n  &:hover {\r\n    background: #4004af,\r\n    color: white;\r\n  }\r\n  &.${activeClass} {\r\n    background: #4004af;\r\n    color: white;\r\n  }\r\n`\r\n\r\nconst dashboardRoutes = [\r\n    {\r\n        path: '/dashboard',\r\n        name: 'Dashboard',\r\n        icon: <Dashboard />,\r\n    },\r\n    {\r\n        path: '/dashboard/analysis',\r\n        name: 'Send money',\r\n        icon: <Payment />,\r\n    },\r\n    {\r\n        path: '/dashboard/wallet',\r\n        name: 'Wallet',\r\n        icon: <AccountBalance />,\r\n    },\r\n    {\r\n        path: '/dashboard/profile',\r\n        name: 'Profile',\r\n        icon: <Person />,\r\n    },\r\n    {\r\n        path: '/dashboard/Settings',\r\n        name: 'Settings',\r\n        icon: <Settings />,\r\n    },\r\n]\r\nconst SideBar = () => {\r\n    return (\r\n        <div style={{ position: 'static' }}>\r\n            <div className=\"pt-4\">\r\n                <Type size=\"25\" className=\"font-weight-bold\" color=\"white\">\r\n                    Afrobank\r\n                </Type>\r\n            </div>\r\n            <div style={{ marginTop: '55px' }}>\r\n                {dashboardRoutes.map((data, idx) => {\r\n                    return (\r\n                        <Sidelink\r\n                            key={idx}\r\n                            exact\r\n                            to={data.path}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            {data.icon}\r\n                            <span className=\"pl-3\">{data.name}</span>\r\n                        </Sidelink>\r\n                    )\r\n                })}\r\n                <div style={{ position: 'absolute', bottom: 25 }}>\r\n                    <Sidelink\r\n                        exact\r\n                        to=\"/signout\"\r\n                        style={{ textDecoration: 'none' }}\r\n                    >\r\n                        <ExitToApp />\r\n                        <span className=\"pl-3\">log out</span>\r\n                    </Sidelink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar\r\n","import Axios from '../index'\r\n\r\nconst transfer = async (payload, sender) => {\r\n    const { recipient, amount } = payload\r\n    const body = {\r\n        recipient: recipient.toString(),\r\n        amount,\r\n        sender: sender.toString(),\r\n    }\r\n    try {\r\n        const response = await Axios.post('/transfer', body)\r\n        return response.data.message\r\n    } catch (error) {\r\n        throw error.response.data\r\n    }\r\n}\r\n\r\nconst transactionHistory = async (accountNumber, updateTransactionHistory) => {\r\n    try {\r\n        const resp = await Axios.get(`/history/${accountNumber}`)\r\n        updateTransactionHistory(resp.data.message)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst getBalance = async (accountNumber) => {\r\n    try {\r\n        const resp = await Axios.get(`/balance/${accountNumber}`)\r\n        return resp.data.message\r\n    } catch (error) {\r\n        throw error.response\r\n    }\r\n}\r\n\r\nexport { transactionHistory, transfer, getBalance }\r\n","const daysOfTheWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat']\r\n\r\nconst months = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n]\r\n\r\nconst getFormatedDate = (date) => {\r\n    const currentDate = new Date(date)\r\n    const day = currentDate.getDay()\r\n    const getDate = currentDate.getDate()\r\n    const month = currentDate.getMonth()\r\n    const year = currentDate.getFullYear()\r\n    const getHours = currentDate.getHours()\r\n    const getMinutes =\r\n        currentDate.getMinutes().toString().length < 2\r\n            ? `0${currentDate.getMinutes()}`\r\n            : currentDate.getMinutes()\r\n\r\n    const getTimeOfTheDay = getHours < 12 ? 'am' : 'pm'\r\n\r\n    const time = `${getHours}:${getMinutes} ${getTimeOfTheDay}`\r\n    const formatedDay = `${daysOfTheWeek[day]} ${getDate} ${months[month]}, ${year}`\r\n    return {\r\n        time,\r\n        formatedDay,\r\n    }\r\n}\r\nexport { getFormatedDate }\r\n","const formatMoney = (amount) => {\r\n    const money = amount.toFixed(2)\r\n    return `₦ ${money}`\r\n}\r\n\r\nexport { formatMoney }\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { transactionHistory, getBalance } from '../../services/transactions'\r\nimport { Container, Col, Row, Table } from 'reactstrap'\r\nimport {\r\n    updateTransactionHistory,\r\n    toggleDisplay,\r\n} from '../../services/appstore/actions/actions'\r\nimport { getFormatedDate } from '../../utils/date'\r\nimport { formatMoney } from '../../utils/money'\r\nimport {\r\n    Autorenew,\r\n    Search,\r\n    Visibility,\r\n    VisibilityOff,\r\n} from '@material-ui/icons'\r\nimport styled from 'styled-components'\r\n\r\nconst AccountCard = styled.div`\r\n    height: 150px;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n\r\n    background: #0d3153;\r\n    transition: all ease 0.3s;\r\n`\r\n\r\nexport const Dashbody = styled.div`\r\n    height: 105vh;\r\n    background: #0f0f0fe5;\r\n`\r\nconst Inputdiv = styled.div`\r\n    width: 230px;\r\n    background: #0f0f0f73;\r\n    height: 44px;\r\n    padding-right: 10px;\r\n    padding-left: 10px;\r\n    border-radius: 5px;\r\n`\r\nconst Input = styled.input`\r\n    border: none;\r\n    outline: none;\r\n    height: 100%;\r\n    background: transparent;\r\n    color: white;\r\n`\r\nconst DashbodyCard = styled.div`\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 10px;\r\n    height: 100%;\r\n    max-height: 530px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\n\r\nconst Dashboard = (props) => {\r\n    const [state, setState] = useState({\r\n        toggleTransferModal: false,\r\n        balance: 0,\r\n        displayBal: true,\r\n        balanceLoading: false,\r\n    })\r\n\r\n    const style = {\r\n        cursor: 'pointer',\r\n    }\r\n\r\n    const pageBalance = async () => {\r\n        const { accountNumber } = props.payLoad\r\n        setState({\r\n            balanceLoading: true,\r\n        })\r\n        try {\r\n            const balance = await getBalance(accountNumber)\r\n            await transactionHistory(\r\n                accountNumber,\r\n                props.updateTransactionHistory\r\n            )\r\n            setState({\r\n                balance: balance,\r\n                balanceLoading: false,\r\n            })\r\n        } catch (error) {\r\n            setState({\r\n                balanceLoading: false,\r\n            })\r\n            throw error\r\n        }\r\n    }\r\n\r\n    const toggleVisibility = () => {\r\n        setState({ ...state, displayBal: !state.displayBal })\r\n        props.toggleDisplay(state.displayBal)\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const { accountNumber } = props.payLoad\r\n            setState({\r\n                balanceLoading: true,\r\n            })\r\n            try {\r\n                await transactionHistory(\r\n                    accountNumber,\r\n                    props.updateTransactionHistory\r\n                )\r\n                const balance = await getBalance(accountNumber)\r\n                setState({\r\n                    balance: balance,\r\n                    balanceLoading: false,\r\n                })\r\n            } catch (error) {\r\n                throw error\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [props.payLoad, props.updateTransactionHistory])\r\n\r\n    return (\r\n        <Col>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex justify-content-between pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Dashboard\r\n                        </Type>\r\n                        <Inputdiv className=\"d-flex justify-content-between align-items-center\">\r\n                            <Search />\r\n                            <Input placeholder=\"Find something\" />\r\n                        </Inputdiv>\r\n                    </div>\r\n                    <DashbodyCard className=\"pb-3 pt-3 mt-5\">\r\n                        <Container className=\"pr-4 pl-4\">\r\n                            <Type color=\"white\" className=\"pt-3 mb-4\">\r\n                                Account overview\r\n                            </Type>\r\n                            <Row className=\"pt-3\">\r\n                                <Col lg={4}>\r\n                                    <AccountCard\r\n                                        style={{\r\n                                            background: '#4004af',\r\n                                            color: 'white',\r\n                                        }}\r\n                                    >\r\n                                        <Container>\r\n                                            <div className=\"d-flex justify-content-end pt-2 align-items-center\">\r\n                                                <Autorenew\r\n                                                    style={style}\r\n                                                    onClick={() =>\r\n                                                        pageBalance()\r\n                                                    }\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"d-flex justify-content-between\">\r\n                                                {props.balanceDisplay ? (\r\n                                                    <Visibility\r\n                                                        onClick={() =>\r\n                                                            toggleVisibility()\r\n                                                        }\r\n                                                        style={{\r\n                                                            position:\r\n                                                                'absolute',\r\n                                                            top: '70%',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <VisibilityOff\r\n                                                        onClick={() =>\r\n                                                            toggleVisibility()\r\n                                                        }\r\n                                                        style={{\r\n                                                            position:\r\n                                                                'absolute',\r\n                                                            top: '70%',\r\n                                                        }}\r\n                                                    />\r\n                                                )}\r\n\r\n                                                <Type\r\n                                                    size=\"24\"\r\n                                                    style={{\r\n                                                        position: 'absolute',\r\n                                                        top: '65%',\r\n                                                        right: '10%',\r\n                                                        fontWeight: 600,\r\n                                                        color: `${\r\n                                                            state.balance < 100\r\n                                                                ? 'red'\r\n                                                                : 'white'\r\n                                                        }`,\r\n                                                    }}\r\n                                                >\r\n                                                    {state.balanceLoading\r\n                                                        ? '****'\r\n                                                        : !props.balanceDisplay\r\n                                                        ? formatMoney(\r\n                                                              state.balance\r\n                                                          )\r\n                                                        : '****'}\r\n                                                </Type>\r\n                                            </div>\r\n                                        </Container>\r\n                                    </AccountCard>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <AccountCard\r\n                                        style={{\r\n                                            background: '#f707eb',\r\n                                            color: 'white',\r\n                                        }}\r\n                                        className=\"pt-2\"\r\n                                    >\r\n                                        <Container>\r\n                                            <Type\r\n                                                size=\"15\"\r\n                                                className=\"mt-5 font-weight-bold\"\r\n                                            >\r\n                                                Account Details\r\n                                            </Type>\r\n                                            <br />\r\n                                            <Type\r\n                                                size=\"12\"\r\n                                                style={{\r\n                                                    position: 'absolute',\r\n                                                    top: '60%',\r\n                                                    fontWeight: 550,\r\n                                                }}\r\n                                            >\r\n                                                Name:{' '}\r\n                                                {`${props.payLoad.firstName} ${props.payLoad.lastName}`}\r\n                                            </Type>\r\n                                            <br />\r\n                                            <Type\r\n                                                size=\"15\"\r\n                                                style={{\r\n                                                    position: 'absolute',\r\n                                                    top: '75%',\r\n                                                    fontWeight: 550,\r\n                                                }}\r\n                                            >\r\n                                                Account Number:{' '}\r\n                                                {props.payLoad.accountNumber}\r\n                                            </Type>\r\n                                        </Container>\r\n                                    </AccountCard>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <AccountCard className=\"d-flex justify-content-center align-items-center\">\r\n                                        <Type color=\"white\">Coming Soon</Type>\r\n                                    </AccountCard>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"d-flex justify-content-between pt-4\">\r\n                                <Type size=\"18\" color=\"white\">\r\n                                    Transactions\r\n                                </Type>\r\n                                <Type color=\"green\">Show all</Type>\r\n                            </div>\r\n                            <div className=\"pt-3\">\r\n                                <Table\r\n                                    style={{ overflowY: 'scroll' }}\r\n                                    striped\r\n                                    responsive\r\n                                    borderless\r\n                                >\r\n                                    <thead style={{ color: 'whitesmoke' }}>\r\n                                        <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Transaction ID</th>\r\n                                            <th>Amount</th>\r\n                                            <th>Type</th>\r\n                                            <th>Date/Time</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody style={{ color: 'white' }}>\r\n                                        {!!props.transactions &&\r\n                                            props.transactions\r\n                                                .slice(0, 4)\r\n                                                .map((req, idx) => {\r\n                                                    const {\r\n                                                        transaction_id,\r\n                                                        amount,\r\n                                                        transaction_date,\r\n                                                        transaction_type,\r\n                                                    } = req\r\n\r\n                                                    return (\r\n                                                        <tr key={idx}>\r\n                                                            <td>{idx}</td>\r\n                                                            <td>\r\n                                                                {transaction_id}\r\n                                                            </td>\r\n                                                            <td\r\n                                                                style={{\r\n                                                                    color: `${\r\n                                                                        transaction_type ===\r\n                                                                        'credit'\r\n                                                                            ? 'green'\r\n                                                                            : 'red'\r\n                                                                    }`,\r\n                                                                    fontWeight: 600,\r\n                                                                }}\r\n                                                            >\r\n                                                                {formatMoney(\r\n                                                                    amount\r\n                                                                )}\r\n                                                            </td>\r\n                                                            <td\r\n                                                                style={{\r\n                                                                    color: `${\r\n                                                                        transaction_type ===\r\n                                                                        'credit'\r\n                                                                            ? 'green'\r\n                                                                            : 'red'\r\n                                                                    }`,\r\n                                                                    fontWeight: 600,\r\n                                                                }}\r\n                                                            >\r\n                                                                {\r\n                                                                    transaction_type\r\n                                                                }\r\n                                                            </td>\r\n                                                            <td>\r\n                                                                {`${\r\n                                                                    getFormatedDate(\r\n                                                                        transaction_date\r\n                                                                    )\r\n                                                                        .formatedDay\r\n                                                                } ${\r\n                                                                    getFormatedDate(\r\n                                                                        transaction_date\r\n                                                                    ).time\r\n                                                                }`}\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    )\r\n                                                })}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </div>\r\n                        </Container>\r\n                    </DashbodyCard>\r\n                </Col>\r\n            </Row>\r\n        </Col>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    payLoad: state.user.signIn.payLoad,\r\n    transactions: state.user.transactions,\r\n    balanceDisplay: state.user.balanceDisplay,\r\n})\r\nexport default connect(mapStateToProps, {\r\n    updateTransactionHistory,\r\n    toggleDisplay,\r\n})(Dashboard)\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nconst Wallet = () => {\r\n    return (\r\n        <Col>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Wallet\r\n                        </Type>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Col>\r\n    )\r\n}\r\nexport default Wallet\r\n","import Axios from '../index'\r\n\r\nconst fetchAllNotifications = async (accountNumber) => {\r\n    try {\r\n        const resp = await Axios.get(`/notifications/${accountNumber}`)\r\n        return resp.data.message\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst deleteSingleNotification = async (id) => {\r\n    try {\r\n        console.log(id)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport { fetchAllNotifications, deleteSingleNotification }\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col, Card } from 'reactstrap'\r\nimport styled from 'styled-components'\r\nimport { getBalance, transfer } from '../../services/transactions/index'\r\nimport { TransferForm } from '../forms/index'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nconst AccountCard = styled(Card)`\r\n    height: 100%;\r\n    min-height: 300px;\r\n    width: 100%;\r\n    margin-top: 100px;\r\n    margin-bottom: 50px;\r\n    border-radius: 10px;\r\n    transition: all ease 0.3s;\r\n`\r\n\r\nconst DashbodyCard = styled.div`\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 10px;\r\n    height: 100%;\r\n    min-height: 560px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`\r\nconst SendMoney = (props) => {\r\n    const [formLoading, setFormLoading] = useState(false)\r\n    const [error, setError] = useState('')\r\n    const [balance, setBalance] = useState(0)\r\n\r\n    useEffect(() => {\r\n        const { accountNumber } = props.payLoad\r\n        async function fetchBalance() {\r\n            setBalance(await getBalance(accountNumber))\r\n        }\r\n        fetchBalance()\r\n    }, [props.payLoad])\r\n\r\n    const handleSubmit = async (values) => {\r\n        const { accountNumber } = props.payLoad\r\n        setFormLoading(true)\r\n        setError('')\r\n        try {\r\n            await transfer(values, accountNumber)\r\n            setFormLoading(false)\r\n        } catch (error) {\r\n            setError(error.message)\r\n            setFormLoading(false)\r\n        }\r\n    }\r\n    return (\r\n        <Col style={{ height: '100%', maxheight: '530px' }}>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Send money\r\n                        </Type>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <DashbodyCard className=\"mt-5\">\r\n                <Col\r\n                    xl={6}\r\n                    className=\"d-flex justify-content-center align-items-center m-auto\"\r\n                >\r\n                    <AccountCard className=\"pr-3 pl-3 pt-3\">\r\n                        {TransferForm(\r\n                            handleSubmit,\r\n                            formLoading,\r\n                            error,\r\n                            balance\r\n                        )}\r\n                    </AccountCard>\r\n                </Col>\r\n            </DashbodyCard>\r\n        </Col>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    payLoad: state.user.signIn.payLoad,\r\n    balanceDisplay: state.user.balanceDisplay,\r\n})\r\nexport default connect(mapStateToProps, {})(SendMoney)\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nconst AccountCard = styled.div`\r\n    height: 150px;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n\r\n    background: #0d3153;\r\n    transition: all ease 0.3s;\r\n`\r\n\r\nconst DashbodyCard = styled.div`\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 10px;\r\n    height: 100%;\r\n    max-height: 530px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`\r\nconst Profile = () => {\r\n    return (\r\n        // <div style={{ height: '100%', maxheight: '530px' }}>\r\n        <Col style={{ height: '100%', maxheight: '530px' }}>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Profile\r\n                        </Type>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <DashbodyCard>\r\n                <Row>\r\n                    <Col xl={4}>\r\n                        <AccountCard>\r\n                            <p>hello</p>\r\n                        </AccountCard>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                </Row>\r\n            </DashbodyCard>\r\n        </Col>\r\n        // </div>\r\n    )\r\n}\r\nexport default Profile\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nconst AccountCard = styled.div`\r\n    height: 150px;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n\r\n    background: #0d3153;\r\n    transition: all ease 0.3s;\r\n`\r\n\r\nconst DashbodyCard = styled.div`\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 10px;\r\n    height: 100%;\r\n    max-height: 530px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`\r\nconst Settings = () => {\r\n    return (\r\n        // <div style={{ height: '100%', maxheight: '530px' }}>\r\n        <Col style={{ height: '100%', maxheight: '530px' }}>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Settings\r\n                        </Type>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <DashbodyCard>\r\n                <Row>\r\n                    <Col xl={4}>\r\n                        <AccountCard>\r\n                            <p>hello</p>\r\n                        </AccountCard>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                </Row>\r\n            </DashbodyCard>\r\n        </Col>\r\n        // </div>\r\n    )\r\n}\r\nexport default Settings\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport SideBar from './sidebar'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport {\r\n    Row,\r\n    Col,\r\n    Container,\r\n    Dropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    DropdownToggle,\r\n} from 'reactstrap'\r\nimport Dashboard, { Dashbody } from './dashboard'\r\nimport { NotificationsNone } from '@material-ui/icons'\r\nimport Wallet from './wallet'\r\nimport {\r\n    fetchAllNotifications,\r\n    deleteSingleNotification,\r\n} from '../../services/notifications'\r\n\r\nimport SendMoney from './sendmoney'\r\nimport Profile from './profile'\r\nimport Settings from './settings'\r\n\r\nconst NotificationDiv = styled.div`\r\n    height: 44px;\r\n    width: 44px;\r\n    background: #0f0f0f73;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n`\r\nconst Menu = styled(DropdownMenu)`\r\n    background: #000000;\r\n    width: 330px;\r\n    max-height: 200px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n    overflow-x: hidden;\r\n    &:hover {\r\n        background: #000000;\r\n    }\r\n`\r\nconst Item = styled(DropdownItem)`\r\n    color: white;\r\n    width: 100%;\r\n    font-size: 14px;\r\n    &:hover {\r\n        background: #0f0f0fc7;\r\n        color: white;\r\n    }\r\n`\r\n\r\nconst Main = (props) => {\r\n    const [showNotification, setNotification] = useState(false)\r\n    const [userNotification, setUsernotification] = useState({\r\n        notifications: [],\r\n    })\r\n\r\n    const toggleNotification = () => {\r\n        setNotification((prevState) => !prevState)\r\n    }\r\n\r\n    const deleteNotification = async (id) => {\r\n        await deleteSingleNotification(id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const { accountNumber } = props.payLoad\r\n        const getNotifications = async () => {\r\n            try {\r\n                setUsernotification({\r\n                    notifications: await fetchAllNotifications(accountNumber),\r\n                })\r\n            } catch (error) {\r\n                throw error\r\n            }\r\n        }\r\n        getNotifications()\r\n    }, [props.payLoad])\r\n\r\n    return (\r\n        <Dashbody className=\"pb-4\">\r\n            <Col>\r\n                <Row>\r\n                    <Col xl={2}>\r\n                        <SideBar />\r\n                    </Col>\r\n\r\n                    <Switch>\r\n                        <Route exact path=\"/dashboard\" component={Dashboard} />\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard/wallet\"\r\n                            component={Wallet}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard/analysis\"\r\n                            component={SendMoney}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard/profile\"\r\n                            component={Profile}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard/Settings\"\r\n                            component={Settings}\r\n                        />\r\n                    </Switch>\r\n                    <Col xl={1}>\r\n                        <Container>\r\n                            <div className=\"d-flex justify-content-between align-items-center pl-2 pr-3 pt-4\">\r\n                                <Dropdown\r\n                                    isOpen={showNotification}\r\n                                    toggle={toggleNotification}\r\n                                    className=\"p-0\"\r\n                                >\r\n                                    <DropdownToggle\r\n                                        style={{\r\n                                            background: 'none',\r\n                                            border: 'none',\r\n                                            outline: 'none',\r\n                                        }}\r\n                                        className=\"p-0 m-0\"\r\n                                    >\r\n                                        <NotificationDiv>\r\n                                            <NotificationsNone\r\n                                                style={{ color: 'white' }}\r\n                                            />\r\n                                        </NotificationDiv>\r\n                                    </DropdownToggle>\r\n                                    <Menu right>\r\n                                        {!userNotification.notifications ? (\r\n                                            <Item\r\n                                                className=\"d-flex justify-content-center align-items-center\"\r\n                                                style={{ height: '40px' }}\r\n                                            >\r\n                                                You don't have any notification\r\n                                            </Item>\r\n                                        ) : (\r\n                                            userNotification.notifications.map(\r\n                                                (data, idx) => (\r\n                                                    <Item\r\n                                                        style={{\r\n                                                            borderBottom:\r\n                                                                '1px solid white',\r\n                                                            height: '50px',\r\n                                                        }}\r\n                                                        key={idx}\r\n                                                        onClick={() =>\r\n                                                            deleteNotification(\r\n                                                                data._id\r\n                                                            )\r\n                                                        }\r\n                                                    >\r\n                                                        {data.notification_text}\r\n                                                    </Item>\r\n                                                )\r\n                                            )\r\n                                        )}\r\n                                    </Menu>\r\n                                </Dropdown>\r\n                            </div>\r\n                        </Container>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Dashbody>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    payLoad: state.user.signIn.payLoad,\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(Main)\r\n","import React, { Component } from 'react'\r\nimport HomePage from '../components/homepage/index'\r\nimport Register from '../components/register'\r\nimport SignIn from '../components/signin/signin'\r\nimport Dashboard from '../components/dashboard'\r\nimport SignOut from '../components/sigout/signOut'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nconst routes = [\r\n    {\r\n        path: '/register',\r\n        component: Register,\r\n    },\r\n    {\r\n        path: '/signin',\r\n        component: SignIn,\r\n    },\r\n    {\r\n        path: '/dashboard',\r\n        component: Dashboard,\r\n    },\r\n    {\r\n        path: '/signout',\r\n        component: SignOut,\r\n    },\r\n]\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter basename=\"/Afrobank\">\r\n                <Switch>\r\n                    {routes.map((data, i) => (\r\n                        <Route\r\n                            key={i}\r\n                            path={data.path}\r\n                            component={data.component}\r\n                        />\r\n                    ))}\r\n                    <Route path=\"/\" component={HomePage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React, { useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { signOut } from '../../services/authentication'\r\nimport { user_login } from '../../services/appstore/actions/actions'\r\n\r\nconst SignOut = (props) => {\r\n    useEffect(() => {\r\n        const { user_login } = props\r\n        console.log(props)\r\n        try {\r\n            signOut(user_login)\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }, [props])\r\n\r\n    return (\r\n        <div>\r\n            <Redirect to=\"/signin\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, { user_login })(SignOut)\r\n","import {\r\n    LOGIN,\r\n    pinReset,\r\n    register,\r\n    transactionHistory,\r\n    toggleBalanceDisplay,\r\n} from '../actions'\r\n\r\nconst intState = {\r\n    signIn: {\r\n        isSignedIn: false,\r\n        payLoad: {},\r\n    },\r\n    userReg: {\r\n        isRegistered: false,\r\n        payLoad: {},\r\n    },\r\n    userPinReset: {\r\n        isPinReset: false,\r\n        payLoad: {},\r\n    },\r\n    balanceDisplay: false,\r\n    transactions: [],\r\n}\r\n\r\nconst reducer = (state = intState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                signIn: {\r\n                    ...state,\r\n                    isSignedIn: action.isSignedIn,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        case register:\r\n            return {\r\n                userReg: {\r\n                    ...state,\r\n                    isRegistered: action.isRegistered,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        case pinReset:\r\n            return {\r\n                userPinReset: {\r\n                    ...state,\r\n                    isPinReset: action.isPinReset,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        case transactionHistory:\r\n            return {\r\n                ...state,\r\n                transactions: action.payload,\r\n            }\r\n        case toggleBalanceDisplay:\r\n            return {\r\n                ...state,\r\n                balanceDisplay: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { reducer }\r\n","import { combineReducers } from 'redux'\r\nimport { reducer } from './reducer'\r\n\r\nexport default combineReducers({\r\n    user: reducer,\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport combineReducers from './reducers'\r\n\r\nconst config = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['user'],\r\n}\r\n\r\nconst middleWare = [thunk]\r\nconst persistedReducer = persistReducer(config, combineReducers)\r\n\r\nconst appStore = () => {\r\n    const store = createStore(persistedReducer, applyMiddleware(...middleWare))\r\n    const persiststore = persistStore(store)\r\n    return { store, persiststore }\r\n}\r\n\r\nexport default appStore\r\n","import React from \"react\";\r\nimport Main from \"./pages\";\r\nimport { Provider } from \"react-redux\"\r\nimport appStore from \"./services/appstore\"\r\nimport {PersistGate } from \"redux-persist/integration/react\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\"\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={appStore().store}>\r\n      <PersistGate loading={null} persistor={appStore().persiststore}>\r\n      <Main />\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}