{"version":3,"sources":["components/homepage/index.js","components/register/index.js","services/index.js","services/authentication/index.js","components/forms/validation/index.js","components/forms/index.js","components/signin/signin.js","services/appstore/actions/actions.js","services/appstore/actions/index.js","modals/alertModals.js","services/transactions/index.js","modals/index.js","components/dashboard/index.js","pages/index.js","services/appstore/reducers/reducer.js","services/appstore/reducers/index.js","services/appstore/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["Nav","styled","div","HomePage","props","style","height","Container","Col","Row","className","xl","to","Component","connect","state","isSignedIn","user","signIn","Register","React","axios","create","baseURL","process","userLogin","payLoad","user_login","a","Axios","post","resp","data","loginSchema","yup","shape","email","required","password","transferSchema","recipient","trim","pin","amount","Input","input","Button","button","Error","p","P","color","SignIn","handleSubmit","value","history","setState","formLoading","error","push","response","message","this","width","validationSchema","initialValues","onSubmit","validateOnBlur","validateOnChange","errors","handleChange","type","name","onChange","placeholder","autoComplete","LoginForm","dispatch","payload","AlertModals","fontSize","title","timeout","show","showConfirm","onConfirm","showCancel","text","transfer","sender","body","toString","transactionHistory","accountNumber","get","TransferModal","values","isCompleted","responseData","transferError","confirm","danger","success","Clear","cursor","onClick","maxLength","styles","spinner","base","stroke","active","AccountCard","Nametag","AssetsCard","HistoryCard","TransferBtn","Type","span","Dashboard","componentDidMount","AllTransactionHistory","toggleModal","toggleTransferModal","firstName","surName","console","log","map","i","key","transaction_date","transaction_type","TrendingUp","TrendingDown","routes","path","component","Main","intState","userReg","isRegistered","userPinReset","isPinReset","combineReducers","action","config","storage","whitelist","middleWare","thunk","persistedReducer","persistReducer","appStore","store","createStore","applyMiddleware","persiststore","persistStore","App","loading","persistor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cb4a29d8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Col, Container, Row } from 'reactstrap'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Nav = styled.div`\r\n    height: 50px;\r\n`\r\nclass HomePage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: 100 }}>\r\n                <Container>\r\n                    <Col>\r\n                        <Row>\r\n                            <Nav className=\"d-flex justify-content-between align-items-center\">\r\n                                <Col xl={6}></Col>\r\n                                <Col\r\n                                    xl={6}\r\n                                    className=\"d-flex justify-content-between\"\r\n                                >\r\n                                    <Link to=\"/signin\">sign in</Link>\r\n                                    <Link to=\"/register\">register</Link>\r\n                                </Col>\r\n                            </Nav>\r\n                        </Row>\r\n                    </Col>\r\n                </Container>\r\n                {/* <TransferModal /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isSignedIn: state.user.signIn.isSignedIn,\r\n})\r\nexport default connect(mapStateToProps, {})(HomePage)\r\n","import React from 'react'\r\n\r\nclass Register extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Dashboard</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: process.env.REACT_APP_BASE_URL,\r\n});\r\n","import Axios from '../index'\r\n\r\nconst registerUser = async (payload) => {\r\n    try {\r\n        const resp = Axios.post('/register', payload)\r\n        console.log(resp)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst userLogin = async (payLoad, user_login) => {\r\n    try {\r\n        const resp = await Axios.post('/login', payLoad)\r\n        user_login(resp.data.data, true)\r\n        return resp\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst resetPin = async (pin) => {\r\n    const body = { pin }\r\n    try {\r\n        const resp = await Axios.post('/pinreset', body)\r\n        console.log(resp)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\nexport { userLogin, resetPin, registerUser }\r\n","import * as yup from 'yup'\r\n\r\nconst loginSchema = yup.object().shape({\r\n    email: yup.string().required('email is required'),\r\n    password: yup.string().required('password is required'),\r\n})\r\n\r\nconst transferSchema = yup.object().shape({\r\n    recipient: yup\r\n        .string()\r\n        .trim()\r\n        .required('recipient account number is required'),\r\n    pin: yup\r\n        .string()\r\n        .trim()\r\n        .required('pin is required to complete transaction'),\r\n    amount: yup.string().trim().required(),\r\n})\r\n\r\nexport { loginSchema, transferSchema }\r\n","import { Formik } from 'formik'\r\nimport React from 'react'\r\nimport { loginSchema, transferSchema } from './validation'\r\n\r\nimport styled from 'styled-components'\r\nimport LoadingOverlay from 'react-loading-overlay'\r\n\r\nconst Input = styled.input`\r\n    border: 1px solid black;\r\n    border-radius: 12px;\r\n    height: 50px;\r\n    width: 100%;\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    outline: none;\r\n`\r\n\r\nconst Button = styled.button`\r\n    width: 70%;\r\n    height: 50px;\r\n    border: none;\r\n    outline: none;\r\n    color: white;\r\n    background: #0d3153;\r\n    border-radius: 7px;\r\n`\r\nconst Error = styled.p`\r\n    color: red;\r\n    font-weight: 600;\r\n    text-align: start;\r\n    font-size: 12px;\r\n`\r\n\r\nconst LoginForm = (handleSubmit, formLoading) => {\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    const style = {\r\n        width: '200px',\r\n    }\r\n    return (\r\n        <Formik\r\n            validationSchema={loginSchema}\r\n            initialValues={initialValues}\r\n            onSubmit={handleSubmit}\r\n            validateOnBlur={false}\r\n            validateOnChange={false}\r\n        >\r\n            {({ errors, handleChange, handleSubmit }) => {\r\n                return (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            onChange={handleChange}\r\n                            placeholder=\"Enter your email\"\r\n                            autoComplete=\"false\"\r\n                            style={style}\r\n                        />\r\n                        <br />\r\n                        {!!errors.email && (\r\n                            <p style={{ color: 'red' }}>{errors.email}</p>\r\n                        )}\r\n                        <Input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            onChange={handleChange}\r\n                            placeholder=\"Enter your password\"\r\n                            autoComplete=\"false\"\r\n                            style={style}\r\n                        />\r\n                        <br />\r\n                        {!!errors.password && (\r\n                            <p style={{ color: 'red' }}>{errors.password}</p>\r\n                        )}\r\n                        <Button type=\"submit\">\r\n                            {formLoading ? '...' : 'sign in'}\r\n                        </Button>\r\n                    </form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst TransferForm = (handleSubmit, formLoading) => {\r\n    const initialValues = {\r\n        recipient: '',\r\n        amount: '',\r\n        pin: '',\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validateOnBlur={false}\r\n            validateOnChange={false}\r\n            initialValues={initialValues}\r\n            validationSchema={transferSchema}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {({ errors, handleChange, handleSubmit, values }) => {\r\n                return (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Input\r\n                            className=\"mb-3\"\r\n                            type=\"number\"\r\n                            name=\"recipient\"\r\n                            placeholder=\"recipient\"\r\n                            onChange={handleChange}\r\n                        />{' '}\r\n                        {!!errors.recipient && (\r\n                            <Error>{errors.recipient}</Error>\r\n                        )}\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"amount\"\r\n                            className=\"mb-3\"\r\n                            placeholder=\"enter amount\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        {!!errors.amount && <Error>{errors.amount}</Error>}\r\n                        <Input\r\n                            // secret\r\n                            className=\"mb-3\"\r\n                            type=\"number\"\r\n                            placeholder=\"enter pin\"\r\n                            onChange={handleChange}\r\n                            name=\"pin\"\r\n                            maxLength={4}\r\n                        />\r\n                        {!!errors.pin && <Error>{errors.pin}</Error>}\r\n                        <Button type=\"submit\" className=\"mt-3 mb-2\">\r\n                            {formLoading ? (\r\n                                <LoadingOverlay\r\n                                    styles={{\r\n                                        spinner: (base) => ({\r\n                                            ...base,\r\n                                            width: '20px',\r\n                                            '& svg circle': {\r\n                                                stroke: `white`,\r\n                                            },\r\n                                        }),\r\n                                    }}\r\n                                    spinner\r\n                                    active={true}\r\n                                />\r\n                            ) : (\r\n                                'send'\r\n                            )}\r\n                        </Button>\r\n                    </form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport { LoginForm, TransferForm }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { userLogin } from '../../services/authentication'\r\nimport { user_login } from '../../services/appstore/actions/actions'\r\nimport { Col, Container, Row } from 'reactstrap'\r\nimport { LoginForm } from '../forms/index'\r\nimport styled from 'styled-components'\r\n\r\nconst P = styled.p`\r\n    color: ${(props) => props.color};\r\n`\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { error: '', formLoading: false }\r\n    }\r\n    handleSubmit = async (value) => {\r\n        const { user_login, history } = this.props\r\n        this.setState({\r\n            formLoading: true,\r\n        })\r\n        try {\r\n            await userLogin(value, user_login)\r\n            this.setState({\r\n                error: '',\r\n                formLoading: false,\r\n            })\r\n            history.push('/dashboard')\r\n        } catch (error) {\r\n            this.setState({\r\n                error: error.response.data.message || 'An error occured',\r\n                formLoading: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { formLoading } = this.state\r\n        return (\r\n            <div className=\"bg-dark d-flex justify-content-center align-items-center m-auto\">\r\n                {LoginForm(this.handleSubmit, formLoading)}\r\n                <br />\r\n                {!!this.state.error && <P color=\"red\">{this.state.error}</P>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { user_login })(SignIn)\r\n","import { LOGIN, pinReset, register, transfer } from './index'\r\n\r\nconst user_login = (data, isSignedIn) => (dispatch) => {\r\n    dispatch({\r\n        type: LOGIN,\r\n        payload: data,\r\n        isSignedIn,\r\n    })\r\n}\r\n\r\nconst userRegister = (data, isRegistered) => (dispatch) => {\r\n    dispatch({\r\n        type: register,\r\n        payload: data,\r\n        isRegistered,\r\n    })\r\n}\r\n\r\nconst userPinReset = (data, isPinReset) => (dispatch) => {\r\n    dispatch({\r\n        type: pinReset,\r\n        payload: data,\r\n        isPinReset,\r\n    })\r\n}\r\n\r\nexport { user_login, userPinReset, userRegister }\r\n","const LOGIN = 'LOGIN'\r\nconst register = 'register'\r\nconst pinReset = 'pinReset'\r\nconst transfer = 'transfer'\r\n\r\nexport { LOGIN, register, pinReset, transfer }\r\n","import React from 'react'\r\nimport SweetAlert from 'react-bootstrap-sweetalert'\r\nimport propTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst Error = styled.p`\r\n    color: ${(props) => props.color};\r\n    font-weight: 500;\r\n    font-size: 12px;\r\n    width: 100%;\r\n`\r\n\r\nclass AlertModals extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <SweetAlert\r\n                style={{ fontSize: '13px' }}\r\n                {...this.props}\r\n                title={this.props.title}\r\n                timeout={3000}\r\n                show={this.props.show}\r\n                showConfirm={false}\r\n                onConfirm={() => {}}\r\n                showCancel={false}\r\n            >\r\n                <div style={{ width: '100%' }}>\r\n                    <Error color={this.props.color}>{this.props.text}</Error>\r\n                </div>\r\n            </SweetAlert>\r\n        )\r\n    }\r\n}\r\n\r\nAlertModals.propTypes = {\r\n    text: propTypes.string.isRequired,\r\n    title: propTypes.string.isRequired,\r\n    show: propTypes.bool.isRequired,\r\n    color: propTypes.string.isRequired,\r\n}\r\nexport default AlertModals\r\n","import Axios from '../index'\r\n\r\nconst transfer = async (payload) => {\r\n    const { recipient, amount, pin, sender } = payload\r\n    const body = {\r\n        recipient: recipient.toString(),\r\n        amount: amount.toString(),\r\n        pin: pin.toString(),\r\n        sender: sender.toString(),\r\n    }\r\n    try {\r\n        const response = await Axios.post('/transfer', body)\r\n        return response.data.message\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst transactionHistory = async (accountNumber) => {\r\n    try {\r\n        const resp = await Axios.get(`/history/${accountNumber}`)\r\n        return resp.data.message\r\n    } catch (error) {\r\n        throw error.response\r\n    }\r\n}\r\n\r\nexport { transactionHistory, transfer }\r\n","import React from 'react'\r\nimport SweetAlert from 'react-bootstrap-sweetalert'\r\nimport { Clear } from '@material-ui/icons'\r\nimport { connect } from 'react-redux'\r\nimport propTypes from 'prop-types'\r\nimport { TransferForm } from '../components/forms'\r\nimport AlertModals from './alertModals'\r\nimport styled from 'styled-components'\r\nimport { transfer } from '../services/transactions'\r\n\r\nconst P = styled.p`\r\n    color: #0d3153;\r\n    font-size: 23px;\r\n    font-weight: 500;\r\n`\r\n\r\nclass TransferModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formLoading: false,\r\n            show: false,\r\n            transferError: '',\r\n            isCompleted: false,\r\n            responseData: '',\r\n        }\r\n    }\r\n    handleSubmit = async (values) => {\r\n        const { accountNumber } = this.props\r\n        this.setState({\r\n            formLoading: true,\r\n        })\r\n        const body = {\r\n            sender: accountNumber,\r\n            ...values,\r\n        }\r\n\r\n        try {\r\n            const response = await transfer(body)\r\n\r\n            this.setState({\r\n                formLoading: false,\r\n                isCompleted: true,\r\n                responseData: response,\r\n            })\r\n        } catch (error) {\r\n            this.setState({\r\n                transferError: error.response.data.message,\r\n                formLoading: false,\r\n                show: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { transferError, show, isCompleted, responseData } = this.state\r\n        return (\r\n            <SweetAlert\r\n                title=\"\"\r\n                show={this.props.show}\r\n                showConfirm={false}\r\n                onConfirm={this.props.confirm}\r\n            >\r\n                {transferError && (\r\n                    <AlertModals\r\n                        color=\"red\"\r\n                        danger\r\n                        show={show}\r\n                        text=\"failed transfer\"\r\n                        title={transferError}\r\n                        onConfirm={() => this.setState({ transferError: '' })}\r\n                    />\r\n                )}\r\n                {isCompleted && (\r\n                    <AlertModals\r\n                        success\r\n                        color=\"green\"\r\n                        show={isCompleted}\r\n                        text=\"Transfer successful\"\r\n                        title={responseData}\r\n                    />\r\n                )}\r\n\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <Clear\r\n                        style={{ color: 'red', cursor: 'pointer' }}\r\n                        onClick={this.props.confirm}\r\n                    />\r\n                </div>\r\n                <div className=\"mb-3 d-flex align-items-center justify-content-center\">\r\n                    <P>Transfer</P>\r\n                </div>\r\n                {TransferForm(this.handleSubmit, this.state.formLoading)}\r\n            </SweetAlert>\r\n        )\r\n    }\r\n}\r\nTransferModal.propTypes = {\r\n    show: propTypes.bool.isRequired,\r\n    confirm: propTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    accountNumber: state.user.signIn.payLoad.accountNumber,\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(TransferModal)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TransferModal from '../../modals'\r\nimport { transactionHistory } from '../../services/transactions'\r\nimport { TrendingDown, TrendingUp } from '@material-ui/icons'\r\nimport { Container, Col, Row } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nconst AccountCard = styled.div`\r\n    width: 450px;\r\n    height: 240px;\r\n    border-radius: 10px;\r\n    background: #0d3153;\r\n`\r\nconst Nametag = styled.div`\r\n    height: 40px;\r\n    width: 120px;\r\n    background: #cdc7ce;\r\n`\r\nconst AssetsCard = styled.div`\r\n    height: 240px;\r\n    width: 200px;\r\n    background: ${(props) => props.color};\r\n    border-radius: 10px;\r\n`\r\nconst HistoryCard = styled.div`\r\n    background: #6f8991;\r\n    width: 545px;\r\n    border-radius: 10px;\r\n`\r\nconst TransferBtn = styled.button`\r\n    width: 25%;\r\n    height: 50px;\r\n    border: none;\r\n    outline: none;\r\n    color: white;\r\n    background: #0d3153;\r\n    border-radius: 7px;\r\n`\r\nconst Type = styled.span`\r\n    color: ${(props) => props.color};\r\n`\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { toggleTransferModal: false, AllTransactionHistory: [] }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const { accountNumber } = this.props.payLoad\r\n\r\n        this.setState({\r\n            AllTransactionHistory: await transactionHistory(accountNumber),\r\n        })\r\n    }\r\n    toggleModal = () => {\r\n        this.setState({ toggleTransferModal: !this.state.toggleTransferModal })\r\n    }\r\n    render() {\r\n        const { firstName, accountNumber, surName } = this.props.payLoad\r\n        const { toggleTransferModal, AllTransactionHistory } = this.state\r\n        console.log(this.props)\r\n        return (\r\n            <div className=\"mb-4\">\r\n                <Container>\r\n                    <Col className=\"pt-2\">\r\n                        <Row className=\"d-flex justify-content-between\">\r\n                            <Col xl={3}>\r\n                                <h1>Overview</h1>\r\n                            </Col>\r\n                            <Col xl={6}>\r\n                                <div className=\"d-flex justify-content-end\">\r\n                                    <Nametag className=\"d-flex justify-content-center align-items-center rounded-pill\">\r\n                                        <h6>{`${firstName} ${surName[0]}`}</h6>\r\n                                    </Nametag>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col className=\"mt-5\">\r\n                        <Row>\r\n                            <Col xl={5}>\r\n                                <AccountCard className=\"pt-4\">\r\n                                    <Container>\r\n                                        <h4 style={{ color: 'white' }}>\r\n                                            current balance\r\n                                        </h4>\r\n                                        <p style={{ color: 'white' }}>\r\n                                            Account number {accountNumber}\r\n                                        </p>\r\n                                    </Container>\r\n                                </AccountCard>\r\n                            </Col>\r\n                            <Col xl={6}>\r\n                                <Row className=\"d-flex justify-content-between\">\r\n                                    <Col xl={2}>\r\n                                        <AssetsCard color=\"#8d7a91\"></AssetsCard>\r\n                                    </Col>\r\n                                    <Col xl={2}>\r\n                                        <AssetsCard color=\"#0d3153\"></AssetsCard>\r\n                                    </Col>\r\n                                    <Col xl={2}>\r\n                                        <AssetsCard color=\"#c4aec9\"></AssetsCard>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <div className=\"pt-3 pb-3\">\r\n                        <TransferBtn onClick={() => this.toggleModal()}>\r\n                            Transfer money\r\n                        </TransferBtn>\r\n                    </div>\r\n                    <Col xl={6}>\r\n                        <Row className=\"d-flex align-items-center\">\r\n                            <Col xl={6}>\r\n                                <h5>Recent activity</h5>\r\n                            </Col>\r\n                            <Col className=\"d-flex justify-content-end\" xl={6}>\r\n                                <h6>All activity</h6>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <HistoryCard className=\"mt-3 pt-2 pb-2\">\r\n                        <Container>\r\n                            {!!AllTransactionHistory &&\r\n                                AllTransactionHistory.map((data, i) => (\r\n                                    <div\r\n                                        className=\"d-flex justify-content-between\"\r\n                                        key={i}\r\n                                    >\r\n                                        <h5 className=\"pb-2 pt-2\">\r\n                                            {data.transaction_date}\r\n                                        </h5>\r\n                                        <Type\r\n                                            color={\r\n                                                data.transaction_type ===\r\n                                                'credit'\r\n                                                    ? 'green'\r\n                                                    : 'red'\r\n                                            }\r\n                                        >\r\n                                            <h5 className=\"d-flex\">\r\n                                                {data.transaction_type ===\r\n                                                'credit' ? (\r\n                                                    <TrendingUp />\r\n                                                ) : (\r\n                                                    <TrendingDown />\r\n                                                )}\r\n                                                {data.transaction_type ===\r\n                                                'credit'\r\n                                                    ? `+${data.amount}`\r\n                                                    : `-${data.amount}`}\r\n                                            </h5>\r\n                                        </Type>\r\n                                    </div>\r\n                                ))}\r\n                        </Container>\r\n                    </HistoryCard>\r\n                </Container>\r\n\r\n                <TransferModal\r\n                    show={toggleTransferModal}\r\n                    confirm={() => this.toggleModal()}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    payLoad: state.user.signIn.payLoad,\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(Dashboard)\r\n","import React, { Component } from 'react'\r\nimport HomePage from '../components/homepage/index'\r\nimport Register from '../components/register'\r\nimport SignIn from '../components/signin/signin'\r\nimport Dashboard from '../components/dashboard'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nconst routes = [\r\n    {\r\n        path: '/register',\r\n        component: Register,\r\n    },\r\n    {\r\n        path: '/signin',\r\n        component: SignIn,\r\n    },\r\n    {\r\n        path: '/dashboard',\r\n        component: Dashboard,\r\n    },\r\n]\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    {routes.map((data, i) => (\r\n                        <Route\r\n                            key={i}\r\n                            path={data.path}\r\n                            component={data.component}\r\n                        />\r\n                    ))}\r\n                    <Route path=\"/\" component={HomePage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import { LOGIN, pinReset, register, transfer } from '../actions'\r\n\r\nconst intState = {\r\n    signIn: {\r\n        isSignedIn: false,\r\n        payLoad: {},\r\n    },\r\n    userReg: {\r\n        isRegistered: false,\r\n        payLoad: {},\r\n    },\r\n    userPinReset: {\r\n        isPinReset: false,\r\n        payLoad: {},\r\n    },\r\n}\r\n\r\nconst reducer = (state = intState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                signIn: {\r\n                    ...state,\r\n                    isSignedIn: action.isSignedIn,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        case register:\r\n            return {\r\n                userReg: {\r\n                    ...state,\r\n                    isRegistered: action.isRegistered,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        case pinReset:\r\n            return {\r\n                userPinReset: {\r\n                    ...state,\r\n                    isPinReset: action.isPinReset,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { reducer }\r\n","import { combineReducers } from 'redux'\r\nimport { reducer } from './reducer'\r\n\r\nexport default combineReducers({\r\n    user: reducer,\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport combineReducers from './reducers'\r\n\r\nconst config = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['user'],\r\n}\r\n\r\nconst middleWare = [thunk]\r\nconst persistedReducer = persistReducer(config, combineReducers)\r\n\r\nconst appStore = () => {\r\n    const store = createStore(persistedReducer, applyMiddleware(...middleWare))\r\n    const persiststore = persistStore(store)\r\n    return { store, persiststore }\r\n}\r\n\r\nexport default appStore\r\n","import React from \"react\";\r\nimport Main from \"./pages\";\r\nimport { Provider } from \"react-redux\"\r\nimport appStore from \"./services/appstore\"\r\nimport {PersistGate } from \"redux-persist/integration/react\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={appStore().store}>\r\n      <PersistGate loading={null} persistor={appStore().persiststore}>\r\n      <Main />\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}