{"version":3,"sources":["components/homepage/index.js","components/register/index.js","services/index.js","services/authentication/index.js","components/forms/validation/index.js","components/forms/index.js","components/signin/signin.js","services/appstore/actions/actions.js","services/appstore/actions/index.js","components/dashboard/sidebar.js","services/transactions/index.js","components/dashboard/dashboard.js","components/dashboard/wallet.js","services/notifications/index.js","components/dashboard/analysis.js","components/dashboard/profile.js","components/dashboard/settings.js","components/dashboard/index.js","pages/index.js","services/appstore/reducers/reducer.js","services/appstore/reducers/index.js","services/appstore/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["Nav","styled","div","connect","state","isSignedIn","user","signIn","style","height","Container","Col","Row","className","xl","to","value","Register","React","Component","axios","create","baseURL","process","userLogin","payLoad","user_login","a","Axios","post","resp","data","loginSchema","yup","shape","email","required","password","recipient","pin","amount","Input","input","Button","button","p","P","props","color","SignIn","handleSubmit","history","setState","formLoading","error","push","response","message","this","width","validationSchema","initialValues","onSubmit","validateOnBlur","validateOnChange","errors","handleChange","type","name","onChange","placeholder","autoComplete","LoginForm","dispatch","payload","Type","span","size","Sidelink","Styled","activeClassName","dashboardRoutes","path","icon","Payment","AccountBalance","Person","SideBar","position","marginTop","map","idx","key","exact","textDecoration","transactionHistory","accountNumber","updateTransactionHistory","get","getBalance","AccountCard","Dashbody","Inputdiv","DashbodyCard","transactions","balanceDisplay","toggleDisplay","display","useState","toggleTransferModal","balance","displayBal","toggleVisibility","useEffect","fetchData","lg","Search","background","Autorenew","cursor","onClick","alert","Visibility","top","VisibilityOff","right","fontWeight","firstName","surName","Table","overflowY","striped","responsive","borderless","req","date","transaction_id","transaction_date","transaction_type","formatedDate","day","Date","toLocaleDateString","time","toLocaleTimeString","Wallet","fetchAllNotifications","deleteSingleNotification","id","console","log","Analysis","maxheight","Profile","Settings","NotificationDiv","Menu","DropdownMenu","Item","DropdownItem","routes","component","showNotification","setNotification","notifications","userNotification","setUsernotification","deleteNotification","getNotifications","Dashboard","Dropdown","isOpen","toggle","prevState","DropdownToggle","border","outline","NotificationsNone","borderBottom","_id","notification_text","Main","basename","i","HomePage","intState","userReg","isRegistered","userPinReset","isPinReset","combineReducers","action","config","storage","whitelist","middleWare","thunk","persistedReducer","persistReducer","appStore","store","createStore","applyMiddleware","persiststore","persistStore","App","loading","persistor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0d66f111.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Col, Container, Row } from 'reactstrap'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport QRCode from 'react-qr-code'\r\n\r\nconst Nav = styled.div`\r\n    height: 50px;\r\n`\r\nconst HomePage = () => {\r\n    return (\r\n        <div style={{ height: 100 }}>\r\n            <Container>\r\n                <Col>\r\n                    <Row>\r\n                        <Nav className=\"d-flex justify-content-between align-items-center\">\r\n                            <Col xl={6}></Col>\r\n                            <Col\r\n                                xl={6}\r\n                                className=\"d-flex justify-content-between\"\r\n                            >\r\n                                <Link to=\"/signin\">sign in</Link>\r\n                                <Link to=\"/register\">register</Link>\r\n                            </Col>\r\n                        </Nav>\r\n                    </Row>\r\n                </Col>\r\n                <Col>\r\n                    <QRCode value=\"Akinola\" />\r\n                </Col>\r\n            </Container>\r\n            {/* <TransferModal /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isSignedIn: state.user.signIn.isSignedIn,\r\n})\r\nexport default connect(mapStateToProps, {})(HomePage)\r\n","import React from 'react'\r\n\r\nclass Register extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Dashboard</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: process.env.REACT_APP_BASE_URL,\r\n});\r\n","import Axios from '../index'\r\n\r\nconst registerUser = async (payload) => {\r\n    try {\r\n        const resp = Axios.post('/register', payload)\r\n        console.log(resp)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst userLogin = async (payLoad, user_login) => {\r\n    try {\r\n        const resp = await Axios.post('/login', payLoad)\r\n        user_login(resp.data.data, true)\r\n        return resp\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst resetPin = async (pin) => {\r\n    const body = { pin }\r\n    try {\r\n        const resp = await Axios.post('/pinreset', body)\r\n        console.log(resp)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\nexport { userLogin, resetPin, registerUser }\r\n","import * as yup from 'yup'\r\n\r\nconst loginSchema = yup.object().shape({\r\n    email: yup.string().required('email is required'),\r\n    password: yup.string().required('password is required'),\r\n})\r\n\r\nconst transferSchema = yup.object().shape({\r\n    recipient: yup.number().required('recipient account number is required'),\r\n    pin: yup.number().required('pin is required to complete transaction'),\r\n    amount: yup.number().required(),\r\n})\r\n\r\nexport { loginSchema, transferSchema }\r\n","import { Formik } from 'formik'\r\nimport React from 'react'\r\nimport { loginSchema, transferSchema } from './validation'\r\n\r\nimport styled from 'styled-components'\r\nimport LoadingOverlay from 'react-loading-overlay'\r\n\r\nconst Input = styled.input`\r\n    border: 1px solid black;\r\n    border-radius: 12px;\r\n    height: 50px;\r\n    width: 100%;\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    outline: none;\r\n`\r\n\r\nconst Button = styled.button`\r\n    width: 70%;\r\n    height: 50px;\r\n    border: none;\r\n    outline: none;\r\n    color: white;\r\n    background: #0d3153;\r\n    border-radius: 7px;\r\n`\r\nconst Error = styled.p`\r\n    color: red;\r\n    font-weight: 600;\r\n    text-align: start;\r\n    font-size: 12px;\r\n`\r\n\r\nconst LoginForm = (handleSubmit, formLoading) => {\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    const style = {\r\n        width: '200px',\r\n    }\r\n    return (\r\n        <Formik\r\n            validationSchema={loginSchema}\r\n            initialValues={initialValues}\r\n            onSubmit={handleSubmit}\r\n            validateOnBlur={false}\r\n            validateOnChange={false}\r\n        >\r\n            {({ errors, handleChange, handleSubmit }) => {\r\n                return (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            onChange={handleChange}\r\n                            placeholder=\"Enter your email\"\r\n                            autoComplete=\"false\"\r\n                            style={style}\r\n                        />\r\n                        <br />\r\n                        {!!errors.email && (\r\n                            <p style={{ color: 'red' }}>{errors.email}</p>\r\n                        )}\r\n                        <Input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            onChange={handleChange}\r\n                            placeholder=\"Enter your password\"\r\n                            autoComplete=\"false\"\r\n                            style={style}\r\n                        />\r\n                        <br />\r\n                        {!!errors.password && (\r\n                            <p style={{ color: 'red' }}>{errors.password}</p>\r\n                        )}\r\n                        <Button type=\"submit\">\r\n                            {formLoading ? '...' : 'sign in'}\r\n                        </Button>\r\n                    </form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst TransferForm = (handleSubmit, formLoading) => {\r\n    const initialValues = {\r\n        recipient: 0,\r\n        amount: 0,\r\n        pin: 0,\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validateOnBlur={false}\r\n            validateOnChange={false}\r\n            initialValues={initialValues}\r\n            validationSchema={transferSchema}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {({ errors, handleChange, handleSubmit, values }) => {\r\n                return (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Input\r\n                            className=\"mb-3\"\r\n                            type=\"number\"\r\n                            name=\"recipient\"\r\n                            placeholder=\"recipient\"\r\n                            onChange={handleChange}\r\n                        />{' '}\r\n                        {!!errors.recipient && (\r\n                            <Error>{errors.recipient}</Error>\r\n                        )}\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"amount\"\r\n                            className=\"mb-3\"\r\n                            placeholder=\"enter amount\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        {!!errors.amount && <Error>{errors.amount}</Error>}\r\n                        <Input\r\n                            // secret\r\n                            className=\"mb-3\"\r\n                            type=\"number\"\r\n                            placeholder=\"enter pin\"\r\n                            onChange={handleChange}\r\n                            name=\"pin\"\r\n                            maxLength={4}\r\n                        />\r\n                        {!!errors.pin && <Error>{errors.pin}</Error>}\r\n                        <Button type=\"submit\" className=\"mt-3 mb-2\">\r\n                            {formLoading ? (\r\n                                <LoadingOverlay\r\n                                    styles={{\r\n                                        spinner: (base) => ({\r\n                                            ...base,\r\n                                            width: '20px',\r\n                                            '& svg circle': {\r\n                                                stroke: `white`,\r\n                                            },\r\n                                        }),\r\n                                    }}\r\n                                    spinner\r\n                                    active={true}\r\n                                />\r\n                            ) : (\r\n                                'send'\r\n                            )}\r\n                        </Button>\r\n                    </form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport { LoginForm, TransferForm }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { userLogin } from '../../services/authentication'\r\nimport { user_login } from '../../services/appstore/actions/actions'\r\n// import { Col, Container, Row } from 'reactstrap'\r\nimport { LoginForm } from '../forms/index'\r\nimport styled from 'styled-components'\r\n\r\nconst P = styled.p`\r\n    color: ${(props) => props.color};\r\n`\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { error: '', formLoading: false }\r\n    }\r\n    handleSubmit = async (value) => {\r\n        const { user_login, history } = this.props\r\n        this.setState({\r\n            formLoading: true,\r\n        })\r\n        try {\r\n            await userLogin(value, user_login)\r\n            this.setState({\r\n                error: '',\r\n                formLoading: false,\r\n            })\r\n            history.push('/dashboard')\r\n        } catch (error) {\r\n            this.setState({\r\n                error: error.response.data.message || 'An error occured',\r\n                formLoading: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { formLoading } = this.state\r\n        return (\r\n            <div className=\"bg-dark d-flex justify-content-center align-items-center m-auto\">\r\n                {LoginForm(this.handleSubmit, formLoading)}\r\n                <br />\r\n                {!!this.state.error && <P color=\"red\">{this.state.error}</P>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { user_login })(SignIn)\r\n","import {\r\n    LOGIN,\r\n    pinReset,\r\n    register,\r\n    transactionHistory,\r\n    toggleBalanceDisplay,\r\n} from './index'\r\n\r\nconst user_login = (data, isSignedIn) => (dispatch) => {\r\n    dispatch({\r\n        type: LOGIN,\r\n        payload: data,\r\n        isSignedIn,\r\n    })\r\n}\r\n\r\nconst userRegister = (data, isRegistered) => (dispatch) => {\r\n    dispatch({\r\n        type: register,\r\n        payload: data,\r\n        isRegistered,\r\n    })\r\n}\r\n\r\nconst userPinReset = (data, isPinReset) => (dispatch) => {\r\n    dispatch({\r\n        type: pinReset,\r\n        payload: data,\r\n        isPinReset,\r\n    })\r\n}\r\n\r\nconst updateTransactionHistory = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: transactionHistory,\r\n        payload: data,\r\n    })\r\n}\r\n\r\nconst toggleDisplay = (display) => (dispatch) => {\r\n    dispatch({\r\n        type: toggleBalanceDisplay,\r\n        payload: display,\r\n    })\r\n}\r\n\r\nexport {\r\n    user_login,\r\n    userPinReset,\r\n    userRegister,\r\n    updateTransactionHistory,\r\n    toggleDisplay,\r\n}\r\n","const LOGIN = 'LOGIN'\r\nconst register = 'register'\r\nconst pinReset = 'pinReset'\r\nconst transfer = 'transfer'\r\nconst transactionHistory = 'transactionHistory'\r\nconst toggleBalanceDisplay = 'toggleBalanceDisplay'\r\n\r\nexport {\r\n    LOGIN,\r\n    register,\r\n    pinReset,\r\n    transfer,\r\n    transactionHistory,\r\n    toggleBalanceDisplay,\r\n}\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Styled from 'styled-components'\r\nimport {\r\n    Dashboard,\r\n    AccountBalance,\r\n    Settings,\r\n    Payment,\r\n    Person,\r\n} from '@material-ui/icons'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nexport const activeClass = 'active'\r\nexport const Sidelink = Styled((props) => (\r\n    <NavLink {...props} activeClassName={activeClass} />\r\n))`\r\n  color: white;\r\n  font-wight: 500;\r\n  font-size: 15px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n  padding-left: 10px;\r\n  border-radius: 10px;\r\n  transition: all ease 0.3s;\r\n  &:hover {\r\n    background: #4004af,\r\n    color: white;\r\n  }\r\n  &.${activeClass} {\r\n     background: #4004af;\r\n    color: white;\r\n  }\r\n`\r\n\r\nconst dashboardRoutes = [\r\n    {\r\n        path: '/dashboard',\r\n        name: 'Dashboard',\r\n        icon: <Dashboard />,\r\n    },\r\n    {\r\n        path: '/dashboard/analysis',\r\n        name: 'Send money',\r\n        icon: <Payment />,\r\n    },\r\n    {\r\n        path: '/dashboard/wallet',\r\n        name: 'Wallet',\r\n        icon: <AccountBalance />,\r\n    },\r\n    {\r\n        path: '/dashboard/profile',\r\n        name: 'Profile',\r\n        icon: <Person />,\r\n    },\r\n    {\r\n        path: '/dashboard/Settings',\r\n        name: 'Settings',\r\n        icon: <Settings />,\r\n    },\r\n]\r\nconst SideBar = () => {\r\n    return (\r\n        <div style={{ position: 'static' }}>\r\n            <div className=\"pt-4\">\r\n                <Type size=\"25\" className=\"font-weight-bold\" color=\"white\">\r\n                    Afrobank\r\n                </Type>\r\n            </div>\r\n            <div style={{ marginTop: '55px' }}>\r\n                {dashboardRoutes.map((data, idx) => {\r\n                    return (\r\n                        <Sidelink\r\n                            key={idx}\r\n                            exact\r\n                            to={data.path}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            {data.icon}\r\n                            <span className=\"pl-3\">{data.name}</span>\r\n                        </Sidelink>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar\r\n","import Axios from '../index'\r\n\r\nconst transfer = async (payload) => {\r\n    const { recipient, amount, pin, sender } = payload\r\n    const body = {\r\n        recipient,\r\n        amount,\r\n        pin,\r\n        sender: sender.toString(),\r\n    }\r\n    try {\r\n        const response = await Axios.post('/transfer', body)\r\n        return response.data.message\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst transactionHistory = async (accountNumber, updateTransactionHistory) => {\r\n    try {\r\n        const resp = await Axios.get(`/history/${accountNumber}`)\r\n        updateTransactionHistory(resp.data.message)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst getBalance = async (accountNumber) => {\r\n    try {\r\n        const resp = await Axios.get(`/balance/${accountNumber}`)\r\n        return resp.data.message\r\n    } catch (error) {\r\n        throw error.response\r\n    }\r\n}\r\n\r\nexport { transactionHistory, transfer, getBalance }\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { transactionHistory, getBalance } from '../../services/transactions'\r\nimport { Container, Col, Row, Table } from 'reactstrap'\r\nimport {\r\n    updateTransactionHistory,\r\n    toggleDisplay,\r\n} from '../../services/appstore/actions/actions'\r\nimport {\r\n    Autorenew,\r\n    Search,\r\n    Visibility,\r\n    VisibilityOff,\r\n} from '@material-ui/icons'\r\n// import TransferModal from '../../modals'\r\nimport styled from 'styled-components'\r\n\r\nconst AccountCard = styled.div`\r\n    height: 150px;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n\r\n    background: #0d3153;\r\n    transition: all ease 0.3s;\r\n`\r\n\r\nexport const Dashbody = styled.div`\r\n    height: 100%;\r\n    background: #0f0f0fe5;\r\n`\r\nconst Inputdiv = styled.div`\r\n    width: 230px;\r\n    background: #0f0f0f73;\r\n    height: 44px;\r\n    padding-right: 10px;\r\n    padding-left: 10px;\r\n    border-radius: 5px;\r\n`\r\nconst Input = styled.input`\r\n    border: none;\r\n    outline: none;\r\n    height: 100%;\r\n    background: transparent;\r\n    color: white;\r\n`\r\nconst DashbodyCard = styled.div`\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 10px;\r\n    height: 100%;\r\n    max-height: 530px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\n\r\nconst Dashboard = (props) => {\r\n    const [state, setState] = useState({\r\n        toggleTransferModal: false,\r\n        balance: 0,\r\n        displayBal: true,\r\n    })\r\n\r\n    const style = {\r\n        cursor: 'pointer',\r\n    }\r\n    const formatDate = (date) => {\r\n        const day = new Date(date).toLocaleDateString()\r\n        const time = new Date(date).toLocaleTimeString()\r\n        return {\r\n            day,\r\n            time,\r\n        }\r\n    }\r\n\r\n    const toggleVisibility = () => {\r\n        setState({ ...state, displayBal: !state.displayBal })\r\n        props.toggleDisplay(state.displayBal)\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const { accountNumber } = props.payLoad\r\n            await transactionHistory(\r\n                accountNumber,\r\n                props.updateTransactionHistory\r\n            )\r\n            const balance = await getBalance(accountNumber)\r\n            setState({\r\n                balance: balance,\r\n            })\r\n        }\r\n        fetchData()\r\n    }, [props.payLoad, props.updateTransactionHistory])\r\n\r\n    return (\r\n        <Col>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex justify-content-between pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Dashboard\r\n                        </Type>\r\n                        <Inputdiv className=\"d-flex justify-content-between align-items-center\">\r\n                            <Search />\r\n                            <Input placeholder=\"Find something\" />\r\n                        </Inputdiv>\r\n                    </div>\r\n                    <DashbodyCard className=\"pb-3 pt-3 mt-5\">\r\n                        <Container className=\"pr-4 pl-4\">\r\n                            <Type color=\"white\" className=\"pt-3 mb-4\">\r\n                                Account overview\r\n                            </Type>\r\n                            <Row className=\"pt-3\">\r\n                                <Col lg={4}>\r\n                                    <AccountCard\r\n                                        style={{\r\n                                            background: '#4004af',\r\n                                            color: 'white',\r\n                                        }}\r\n                                    >\r\n                                        <Container>\r\n                                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                                <Type size=\"30\">₦</Type>\r\n                                                <Autorenew\r\n                                                    style={style}\r\n                                                    onClick={() =>\r\n                                                        alert('clicked')\r\n                                                    }\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"d-flex justify-content-between\">\r\n                                                {props.balanceDisplay ? (\r\n                                                    <Visibility\r\n                                                        onClick={() =>\r\n                                                            toggleVisibility()\r\n                                                        }\r\n                                                        style={{\r\n                                                            position:\r\n                                                                'absolute',\r\n                                                            top: '70%',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <VisibilityOff\r\n                                                        onClick={() =>\r\n                                                            toggleVisibility()\r\n                                                        }\r\n                                                        style={{\r\n                                                            position:\r\n                                                                'absolute',\r\n                                                            top: '70%',\r\n                                                        }}\r\n                                                    />\r\n                                                )}\r\n\r\n                                                <Type\r\n                                                    size=\"24\"\r\n                                                    style={{\r\n                                                        position: 'absolute',\r\n                                                        top: '65%',\r\n                                                        right: '10%',\r\n                                                    }}\r\n                                                >\r\n                                                    {!props.balanceDisplay\r\n                                                        ? state.balance\r\n                                                        : '****'}\r\n                                                </Type>\r\n                                            </div>\r\n                                        </Container>\r\n                                    </AccountCard>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <AccountCard\r\n                                        style={{\r\n                                            background: '#f707eb',\r\n                                            color: 'white',\r\n                                        }}\r\n                                        className=\"pt-2\"\r\n                                    >\r\n                                        <Container>\r\n                                            <Type\r\n                                                size=\"15\"\r\n                                                className=\"mt-5 font-weight-bold\"\r\n                                            >\r\n                                                Account Details\r\n                                            </Type>\r\n                                            <br />\r\n                                            <Type\r\n                                                size=\"12\"\r\n                                                style={{\r\n                                                    position: 'absolute',\r\n                                                    top: '60%',\r\n                                                    fontWeight: 550,\r\n                                                }}\r\n                                            >\r\n                                                Name:{' '}\r\n                                                {`${props.payLoad.firstName} ${props.payLoad.surName}`}\r\n                                            </Type>\r\n                                            <br />\r\n                                            <Type\r\n                                                size=\"15\"\r\n                                                style={{\r\n                                                    position: 'absolute',\r\n                                                    top: '75%',\r\n                                                    fontWeight: 550,\r\n                                                }}\r\n                                            >\r\n                                                Account Number:{' '}\r\n                                                {props.payLoad.accountNumber}\r\n                                            </Type>\r\n                                        </Container>\r\n                                    </AccountCard>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <AccountCard className=\"d-flex justify-content-center align-items-center\">\r\n                                        <Type color=\"white\">Coming Soon</Type>\r\n                                    </AccountCard>\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"d-flex justify-content-between pt-4\">\r\n                                <Type size=\"18\" color=\"white\">\r\n                                    Transactions\r\n                                </Type>\r\n                                <Type color=\"green\">Show all</Type>\r\n                            </div>\r\n                            <div className=\"pt-3\">\r\n                                <Table\r\n                                    style={{ overflowY: 'scroll' }}\r\n                                    striped\r\n                                    responsive\r\n                                    borderless\r\n                                >\r\n                                    <thead style={{ color: 'whitesmoke' }}>\r\n                                        <tr>\r\n                                            <th>S/N</th>\r\n                                            <th>Transaction ID</th>\r\n                                            <th>Amount</th>\r\n                                            <th>Type</th>\r\n                                            <th>Date/Time</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody style={{ color: 'white' }}>\r\n                                        {!!props.transactions &&\r\n                                            props.transactions.map(\r\n                                                (req, idx) => {\r\n                                                    const {\r\n                                                        transaction_id,\r\n                                                        amount,\r\n                                                        transaction_date,\r\n                                                        transaction_type,\r\n                                                    } = req\r\n                                                    const formatedDate =\r\n                                                        formatDate(\r\n                                                            transaction_date\r\n                                                        )\r\n                                                    return (\r\n                                                        <tr key={idx}>\r\n                                                            <td>{idx}</td>\r\n                                                            <td>\r\n                                                                {transaction_id}\r\n                                                            </td>\r\n                                                            <td\r\n                                                                style={{\r\n                                                                    color: `${\r\n                                                                        transaction_type ===\r\n                                                                        'credit'\r\n                                                                            ? 'green'\r\n                                                                            : 'red'\r\n                                                                    }`,\r\n                                                                    fontWeight: 600,\r\n                                                                }}\r\n                                                            >\r\n                                                                ₦{amount}\r\n                                                            </td>\r\n                                                            <td\r\n                                                                style={{\r\n                                                                    color: `${\r\n                                                                        transaction_type ===\r\n                                                                        'credit'\r\n                                                                            ? 'green'\r\n                                                                            : 'red'\r\n                                                                    }`,\r\n                                                                    fontWeight: 600,\r\n                                                                }}\r\n                                                            >\r\n                                                                {\r\n                                                                    transaction_type\r\n                                                                }\r\n                                                            </td>\r\n                                                            <td>\r\n                                                                {\r\n                                                                    formatedDate.day\r\n                                                                }\r\n                                                                ,\r\n                                                                {\r\n                                                                    formatedDate.time\r\n                                                                }\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    )\r\n                                                }\r\n                                            )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </div>\r\n                        </Container>\r\n                    </DashbodyCard>\r\n                </Col>\r\n            </Row>\r\n        </Col>\r\n\r\n        // <TransferModal\r\n        //     show={state.toggleTransferModal}\r\n        //     confirm={() => toggleModal()}\r\n        // />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    payLoad: state.user.signIn.payLoad,\r\n    transactions: state.user.transactions,\r\n    balanceDisplay: state.user.balanceDisplay,\r\n})\r\nexport default connect(mapStateToProps, {\r\n    updateTransactionHistory,\r\n    toggleDisplay,\r\n})(Dashboard)\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nconst Wallet = () => {\r\n    return (\r\n        <Col>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Wallet\r\n                        </Type>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Col>\r\n    )\r\n}\r\nexport default Wallet\r\n","import Axios from '../index'\r\n\r\nconst fetchAllNotifications = async (accountNumber) => {\r\n    try {\r\n        const resp = await Axios.get(`/notifications/${accountNumber}`)\r\n        return resp.data.message\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst deleteSingleNotification = async (id) => {\r\n    try {\r\n        console.log(id)\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport { fetchAllNotifications, deleteSingleNotification }\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nconst AccountCard = styled.div`\r\n    height: 150px;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n\r\n    background: #0d3153;\r\n    transition: all ease 0.3s;\r\n`\r\n\r\nconst DashbodyCard = styled.div`\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 10px;\r\n    height: 100%;\r\n    max-height: 530px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`\r\nconst Analysis = () => {\r\n    return (\r\n        // <div style={{ height: '100%', maxheight: '530px' }}>\r\n        <Col style={{ height: '100%', maxheight: '530px' }}>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Analysis\r\n                        </Type>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <DashbodyCard>\r\n                <Row>\r\n                    <Col xl={4}>\r\n                        <AccountCard>\r\n                            <p>hello</p>\r\n                        </AccountCard>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                </Row>\r\n            </DashbodyCard>\r\n        </Col>\r\n        // </div>\r\n    )\r\n}\r\nexport default Analysis\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nconst AccountCard = styled.div`\r\n    height: 150px;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n\r\n    background: #0d3153;\r\n    transition: all ease 0.3s;\r\n`\r\n\r\nconst DashbodyCard = styled.div`\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 10px;\r\n    height: 100%;\r\n    max-height: 530px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`\r\nconst Profile = () => {\r\n    return (\r\n        // <div style={{ height: '100%', maxheight: '530px' }}>\r\n        <Col style={{ height: '100%', maxheight: '530px' }}>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Profile\r\n                        </Type>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <DashbodyCard>\r\n                <Row>\r\n                    <Col xl={4}>\r\n                        <AccountCard>\r\n                            <p>hello</p>\r\n                        </AccountCard>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                </Row>\r\n            </DashbodyCard>\r\n        </Col>\r\n        // </div>\r\n    )\r\n}\r\nexport default Profile\r\n","import React from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nexport const Type = styled.span`\r\n    color: ${(props) => props.color};\r\n    font-size: ${(props) => props.size}px;\r\n`\r\nconst AccountCard = styled.div`\r\n    height: 150px;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n\r\n    background: #0d3153;\r\n    transition: all ease 0.3s;\r\n`\r\n\r\nconst DashbodyCard = styled.div`\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 10px;\r\n    height: 100%;\r\n    max-height: 530px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`\r\nconst Settings = () => {\r\n    return (\r\n        // <div style={{ height: '100%', maxheight: '530px' }}>\r\n        <Col style={{ height: '100%', maxheight: '530px' }}>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <div className=\"d-flex pt-4 align-items-center\">\r\n                        <Type\r\n                            size=\"25\"\r\n                            className=\"font-weight-bold\"\r\n                            color=\"white\"\r\n                        >\r\n                            Settings\r\n                        </Type>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <DashbodyCard>\r\n                <Row>\r\n                    <Col xl={4}>\r\n                        <AccountCard>\r\n                            <p>hello</p>\r\n                        </AccountCard>\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                    <Col xl={4}>\r\n                        <AccountCard />\r\n                    </Col>\r\n                </Row>\r\n            </DashbodyCard>\r\n        </Col>\r\n        // </div>\r\n    )\r\n}\r\nexport default Settings\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport SideBar from './sidebar'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport {\r\n    Row,\r\n    Col,\r\n    Container,\r\n    Dropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    DropdownToggle,\r\n} from 'reactstrap'\r\nimport Dashboard, { Dashbody } from './dashboard'\r\nimport { NotificationsNone } from '@material-ui/icons'\r\nimport Wallet from './wallet'\r\nimport {\r\n    fetchAllNotifications,\r\n    deleteSingleNotification,\r\n} from '../../services/notifications'\r\n\r\nimport Analysis from './analysis'\r\nimport Profile from './profile'\r\nimport Settings from './settings'\r\n\r\nconst NotificationDiv = styled.div`\r\n    height: 44px;\r\n    width: 44px;\r\n    background: #0f0f0f73;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n`\r\nconst Menu = styled(DropdownMenu)`\r\n    background: #000000;\r\n    width: 330px;\r\n    max-height: 200px;\r\n    overflow-y: scroll;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n    overflow-x: hidden;\r\n    &:hover {\r\n        background: #000000;\r\n    }\r\n`\r\nconst Item = styled(DropdownItem)`\r\n    color: white;\r\n    width: 100%;\r\n    font-size: 14px;\r\n    &:hover {\r\n        background: #0f0f0fc7;\r\n        color: white;\r\n    }\r\n`\r\n\r\nconst Main = (props) => {\r\n    const [showNotification, setNotification] = useState(false)\r\n    const [userNotification, setUsernotification] = useState({\r\n        notifications: [],\r\n    })\r\n\r\n    const toggleNotification = () => {\r\n        setNotification((prevState) => !prevState)\r\n    }\r\n\r\n    const deleteNotification = async (id) => {\r\n        await deleteSingleNotification(id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const { accountNumber } = props.payLoad\r\n        const getNotifications = async () => {\r\n            try {\r\n                setUsernotification({\r\n                    notifications: await fetchAllNotifications(accountNumber),\r\n                })\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        getNotifications()\r\n    }, [props.payLoad])\r\n\r\n    return (\r\n        <Dashbody className=\"pb-4\">\r\n            <Col>\r\n                <Row>\r\n                    <Col xl={2}>\r\n                        <SideBar />\r\n                    </Col>\r\n\r\n                    <Switch>\r\n                        <Route exact path=\"/dashboard\" component={Dashboard} />\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard/wallet\"\r\n                            component={Wallet}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard/analysis\"\r\n                            component={Analysis}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard/profile\"\r\n                            component={Profile}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard/Settings\"\r\n                            component={Settings}\r\n                        />\r\n                    </Switch>\r\n                    <Col xl={1}>\r\n                        <Container>\r\n                            <div className=\"d-flex justify-content-between align-items-center pl-2 pr-3 pt-4\">\r\n                                <Dropdown\r\n                                    isOpen={showNotification}\r\n                                    toggle={toggleNotification}\r\n                                    className=\"p-0\"\r\n                                >\r\n                                    <DropdownToggle\r\n                                        style={{\r\n                                            background: 'none',\r\n                                            border: 'none',\r\n                                            outline: 'none',\r\n                                        }}\r\n                                        className=\"p-0 m-0\"\r\n                                    >\r\n                                        <NotificationDiv>\r\n                                            <NotificationsNone\r\n                                                style={{ color: 'white' }}\r\n                                            />\r\n                                        </NotificationDiv>\r\n                                    </DropdownToggle>\r\n                                    <Menu right>\r\n                                        {!userNotification.notifications ? (\r\n                                            <Item\r\n                                                className=\"d-flex justify-content-center align-items-center\"\r\n                                                style={{ height: '40px' }}\r\n                                            >\r\n                                                You don't have any notification\r\n                                            </Item>\r\n                                        ) : (\r\n                                            userNotification.notifications.map(\r\n                                                (data, idx) => (\r\n                                                    <Item\r\n                                                        style={{\r\n                                                            borderBottom:\r\n                                                                '1px solid white',\r\n                                                            height: '50px',\r\n                                                        }}\r\n                                                        key={idx}\r\n                                                        onClick={() =>\r\n                                                            deleteNotification(\r\n                                                                data._id\r\n                                                            )\r\n                                                        }\r\n                                                    >\r\n                                                        {data.notification_text}\r\n                                                    </Item>\r\n                                                )\r\n                                            )\r\n                                        )}\r\n                                    </Menu>\r\n                                </Dropdown>\r\n                            </div>\r\n                        </Container>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Dashbody>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    payLoad: state.user.signIn.payLoad,\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(Main)\r\n","import React, { Component } from 'react'\r\nimport HomePage from '../components/homepage/index'\r\nimport Register from '../components/register'\r\nimport SignIn from '../components/signin/signin'\r\nimport Dashboard from '../components/dashboard'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nconst routes = [\r\n    {\r\n        path: '/register',\r\n        component: Register,\r\n    },\r\n    {\r\n        path: '/signin',\r\n        component: SignIn,\r\n    },\r\n    {\r\n        path: '/dashboard',\r\n        component: Dashboard,\r\n    },\r\n]\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter basename=\"/Afrobank\">\r\n                <Switch>\r\n                    {routes.map((data, i) => (\r\n                        <Route\r\n                            key={i}\r\n                            path={data.path}\r\n                            component={data.component}\r\n                        />\r\n                    ))}\r\n                    <Route path=\"/\" component={HomePage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import {\r\n    LOGIN,\r\n    pinReset,\r\n    register,\r\n    transactionHistory,\r\n    toggleBalanceDisplay,\r\n} from '../actions'\r\n\r\nconst intState = {\r\n    signIn: {\r\n        isSignedIn: false,\r\n        payLoad: {},\r\n    },\r\n    userReg: {\r\n        isRegistered: false,\r\n        payLoad: {},\r\n    },\r\n    userPinReset: {\r\n        isPinReset: false,\r\n        payLoad: {},\r\n    },\r\n    balanceDisplay: false,\r\n    transactions: [],\r\n}\r\n\r\nconst reducer = (state = intState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                signIn: {\r\n                    ...state,\r\n                    isSignedIn: action.isSignedIn,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        case register:\r\n            return {\r\n                userReg: {\r\n                    ...state,\r\n                    isRegistered: action.isRegistered,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        case pinReset:\r\n            return {\r\n                userPinReset: {\r\n                    ...state,\r\n                    isPinReset: action.isPinReset,\r\n                    payLoad: action.payload,\r\n                },\r\n            }\r\n        case transactionHistory:\r\n            return {\r\n                ...state,\r\n                transactions: action.payload,\r\n            }\r\n        case toggleBalanceDisplay:\r\n            return {\r\n                ...state,\r\n                balanceDisplay: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { reducer }\r\n","import { combineReducers } from 'redux'\r\nimport { reducer } from './reducer'\r\n\r\nexport default combineReducers({\r\n    user: reducer,\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport combineReducers from './reducers'\r\n\r\nconst config = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['user'],\r\n}\r\n\r\nconst middleWare = [thunk]\r\nconst persistedReducer = persistReducer(config, combineReducers)\r\n\r\nconst appStore = () => {\r\n    const store = createStore(persistedReducer, applyMiddleware(...middleWare))\r\n    const persiststore = persistStore(store)\r\n    return { store, persiststore }\r\n}\r\n\r\nexport default appStore\r\n","import React from \"react\";\r\nimport Main from \"./pages\";\r\nimport { Provider } from \"react-redux\"\r\nimport appStore from \"./services/appstore\"\r\nimport {PersistGate } from \"redux-persist/integration/react\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={appStore().store}>\r\n      <PersistGate loading={null} persistor={appStore().persiststore}>\r\n      <Main />\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}